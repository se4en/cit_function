{"algorithms":{"#text":"\n","@version":"110505","algorithm":{"#tail":"\n","@name":"ParsCit","#text":"\n","@version":"110505","citationList":{"#tail":"\n","#text":"\n","citation":[{"volume":{"#tail":"\n","#text":"18"},"#tail":"\n","date":{"#tail":"\n","#text":"1992"},"rawString":{"#tail":"\n","#text":"Peter. F. Brown, Vincent. J. Della Pietra, Peter. V. deSouza, Jenifer. C. Lai and Robert. L. Mercer. Classbased n-gram models of natural language. Computational Linguistics, 18(4):467\u2013479, Dec. 1992."},"journal":{"#tail":"\n","#text":"Computational Linguistics,"},"#text":"\n","issue":{"#tail":"\n","#text":"4"},"marker":{"#tail":"\n","#text":"Brown, Pietra, deSouza, Lai, Mercer, 1992"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"sentences. A major difference between the two approaches, however, is that in CE the definition of the sentence's neighborhood must be specified in advance by the modeler. In our work, the 'neighborhood' is determined automatically and dynamically as learning proceeds, according to the capabilities of the classifiers used. The sentence representation we chose for this work is rather simple, and was intended primarily to demonstrate the efficacy of our approach. In future work we plan to experiment with richer representations, e.g. including long-range n-grams (Rosenfeld, 1996), class n-grams (Brown et al., 1992), grammatical features (Amaya and Benedy, 2001), etc'. The main computational bottleneck in our approach is the generation of negative samples from the current model. Rejection sampling allowed us to use computationally intensive classifiers as our features by reducing the number of classifications that had to be performed during the sampling process. However, if the boosted model strays too far from the baseline P0, these savings will be negated by the very large sentence rejection probabilities that will ensue. This is likely to be the case when richer representations as suggested above are ","@endWordPosition":"4116","@position":"24230","annotationId":"T1","@startWordPosition":"4113","@citStr":"Brown et al., 1992"}},"title":{"#tail":"\n","#text":"Classbased n-gram models of natural language."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"F Brown"},{"#tail":"\n","#text":"Vincent J Della Pietra"},{"#tail":"\n","#text":"Peter V deSouza"},{"#tail":"\n","#text":"Jenifer C Lai"},{"#tail":"\n","#text":"Robert L Mercer"}]}},{"#tail":"\n","tech":{"#tail":"\n","#text":"Technical Report TR\u201310\u201398,"},"date":{"#tail":"\n","#text":"1998"},"institution":{"#tail":"\n","#text":"Center for Research in Computing Technology, Harvard University"},"rawString":{"#tail":"\n","#text":"Stanley F. Chen and Joshua. Goodman. 1998. An empirical study of smoothing techniques for language modeling. Technical Report TR\u201310\u201398, Center for Research in Computing Technology, Harvard University"},"#text":"\n","marker":{"#tail":"\n","#text":"Goodman, 1998"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"tested our approach on the ATIS natural language corpus (Hemphill et al., 1990). We split the corpus into a training set of 11,000 sentences, a held-out set containing 1,045 sentences, and a test set containing 1,000 sentences which were reserved for measuring perplexity. The corpus was pre-processed so that every word appearing less than three times was replaced by a special UNK symbol. The resulting lexicon contained 603 word types. Our learning framework leaves open a number of design choices: 1. Baseline language model: For P0 we used a trigram with modified kneser-ney smoothing [Chen and Goodman, 1998], which is still considered one of the best smoothing methods for n-gram language models. 2. Sentence representation: Each sentence was represented as the collection of unigrams, bigrams and trigrams it contained. A coordinate was reserved for each such n-gram which appeared in the data, whether real or sampled. The value of the n'th coordinate in the vector representation of 4 Interestingly, in practice both methods result in near identical rejection probabilities, within a precision of 0.0001. This indicates that satisfying the constraint (18) for the new feature is more important, in terms","@endWordPosition":"2772","@position":"15960","annotationId":"T2","@startWordPosition":"2771","@citStr":"Goodman, 1998"}},"title":{"#tail":"\n","#text":"An empirical study of smoothing techniques for language modeling."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"Goodman"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2007"},"rawString":{"#tail":"\n","#text":"Daisuke Okanohara and Jun'ichi Tsujii. 2007. A discriminative language model with pseudo-negative samples. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics."},"#text":"\n","marker":{"#tail":"\n","#text":"Okanohara, Tsujii, 2007"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"ntences, i.e. positive samples, obtaining these can be problematic. In most work on discriminative language modeling this was not a major issue as the work was concerned with specific applications, and these provided a natural definition of negative samples. For instance, (Roark et al., 2007) proposed a discriminative language model for a speech recognition task. Given an acoustic sequence, a baseline recognizer was used to generate a set of possible transcriptions. The correct transcription was taken as a positive sample, while the rest were taken as negative samples. More recently, however, Okanohara and Tsujii (2007) showed that a 1 Conditional maximum entropy models (Rosenfeld, 1996) provide somewhat of a counter-example, but there, too, many kinds of global and non-local features are difficult to use (Rosenfeld, 1997). Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing, pages 51\u201358, Honolulu, October 2008. c�2008 Association for Computational Linguistics discriminative language model can be trained independently of a specific application by using a generative language model to obtain the negative samples. Using a non-linear large-margin learning algorithm, they succes","@endWordPosition":"445","@position":"2963","annotationId":"T3","@startWordPosition":"442","@citStr":"Okanohara and Tsujii (2007)"},{"#tail":"\n","#text":" classes of sentences. In the remainder of the paper we will use feature and classifier interchangeably. 2.3 Rejection sampling Self-supervised boosting was presented as a general method for density estimation, and was not tested in the context of language modeling. Rather, Welling at al. demonstrated its effectiveness in modeling hand-written digits and on synthetic data. Đn both cases essentially linear classifiers were used as features. As these are computationally very efficient, the authors could use a variant of Gibbs sampling for generating negative samples. Unfortunately, as shown in (Okanohara and Tsujii, 2007), with the represetation of sentences that we use, linear classifiers cannot discriminate real sentences from sentences sampled from a trigram, which is the model we use as a baseline, so here we resort to a non-linear large-margin classifier (see section 3 for details). While large-margin classifiers consistently out-perform other learning algorithms in many NLP tasks, their non-linear variations are also notoriously slow when it comes to computing their decision function \u2013 taking time that can be linear in the size of their training data. This means that MCMC techniques like Gibbs sampling q","@endWordPosition":"1579","@position":"9585","annotationId":"T4","@startWordPosition":"1576","@citStr":"Okanohara and Tsujii, 2007"},{"#tail":"\n","#text":"he constraint (18) for the new feature is more important, in terms of perplexity, than preserving the constraints of the previous features, insofar as those get violated. sentence s was set to the number of times the corresponding n-gram appeared in s. 3. Type of classifiers: For our features we used large-margin classifiers trained using the online algorithm described in (Crammer et al., 2006). The code for the classifier was generously provided by Daisuke Okanohara. This code was extensively optimized to take advantage of the very sparse sentence representation described above. As shown in (Okanohara and Tsujii, 2007), using this representation, a linear classifier cannot distinguish sentences sampled from a trigram and real sentences. Therefore, we used a 3rd order polynomial kernel, which was found to give good results. No special effort was otherwise made in order to optimize the parameters of the classifiers. 4. Stopping criterion: The process of adding features to the model was continued until the classification performance of the next feature was within 2% of chance performance. We refer to the language model obtained by this approach as the boosted model to distinguish it from the baseline model. To","@endWordPosition":"2950","@position":"17121","annotationId":"T5","@startWordPosition":"2947","@citStr":"Okanohara and Tsujii, 2007"}]},"title":{"#tail":"\n","#text":"A discriminative language model with pseudo-negative samples."},"booktitle":{"#tail":"\n","#text":"In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Daisuke Okanohara"},{"#tail":"\n","#text":"Jun'ichi Tsujii"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2007"},"rawString":{"#tail":"\n","#text":"Daisuke Okanohara and Jun'ichi Tsujii. 2007. A discriminative language model with pseudo-negative samples. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics."},"#text":"\n","marker":{"#tail":"\n","#text":"Okanohara, Tsujii, 2007"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"ntences, i.e. positive samples, obtaining these can be problematic. In most work on discriminative language modeling this was not a major issue as the work was concerned with specific applications, and these provided a natural definition of negative samples. For instance, (Roark et al., 2007) proposed a discriminative language model for a speech recognition task. Given an acoustic sequence, a baseline recognizer was used to generate a set of possible transcriptions. The correct transcription was taken as a positive sample, while the rest were taken as negative samples. More recently, however, Okanohara and Tsujii (2007) showed that a 1 Conditional maximum entropy models (Rosenfeld, 1996) provide somewhat of a counter-example, but there, too, many kinds of global and non-local features are difficult to use (Rosenfeld, 1997). Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing, pages 51\u201358, Honolulu, October 2008. c�2008 Association for Computational Linguistics discriminative language model can be trained independently of a specific application by using a generative language model to obtain the negative samples. Using a non-linear large-margin learning algorithm, they succes","@endWordPosition":"445","@position":"2963","annotationId":"T6","@startWordPosition":"442","@citStr":"Okanohara and Tsujii (2007)"},{"#tail":"\n","#text":" classes of sentences. In the remainder of the paper we will use feature and classifier interchangeably. 2.3 Rejection sampling Self-supervised boosting was presented as a general method for density estimation, and was not tested in the context of language modeling. Rather, Welling at al. demonstrated its effectiveness in modeling hand-written digits and on synthetic data. Đn both cases essentially linear classifiers were used as features. As these are computationally very efficient, the authors could use a variant of Gibbs sampling for generating negative samples. Unfortunately, as shown in (Okanohara and Tsujii, 2007), with the represetation of sentences that we use, linear classifiers cannot discriminate real sentences from sentences sampled from a trigram, which is the model we use as a baseline, so here we resort to a non-linear large-margin classifier (see section 3 for details). While large-margin classifiers consistently out-perform other learning algorithms in many NLP tasks, their non-linear variations are also notoriously slow when it comes to computing their decision function \u2013 taking time that can be linear in the size of their training data. This means that MCMC techniques like Gibbs sampling q","@endWordPosition":"1579","@position":"9585","annotationId":"T7","@startWordPosition":"1576","@citStr":"Okanohara and Tsujii, 2007"},{"#tail":"\n","#text":"he constraint (18) for the new feature is more important, in terms of perplexity, than preserving the constraints of the previous features, insofar as those get violated. sentence s was set to the number of times the corresponding n-gram appeared in s. 3. Type of classifiers: For our features we used large-margin classifiers trained using the online algorithm described in (Crammer et al., 2006). The code for the classifier was generously provided by Daisuke Okanohara. This code was extensively optimized to take advantage of the very sparse sentence representation described above. As shown in (Okanohara and Tsujii, 2007), using this representation, a linear classifier cannot distinguish sentences sampled from a trigram and real sentences. Therefore, we used a 3rd order polynomial kernel, which was found to give good results. No special effort was otherwise made in order to optimize the parameters of the classifiers. 4. Stopping criterion: The process of adding features to the model was continued until the classification performance of the next feature was within 2% of chance performance. We refer to the language model obtained by this approach as the boosted model to distinguish it from the baseline model. To","@endWordPosition":"2950","@position":"17121","annotationId":"T8","@startWordPosition":"2947","@citStr":"Okanohara and Tsujii, 2007"}]},"title":{"#tail":"\n","#text":"A discriminative language model with pseudo-negative samples."},"booktitle":{"#tail":"\n","#text":"In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Daisuke Okanohara"},{"#tail":"\n","#text":"Jun'ichi Tsujii"}]}}]}}}}
