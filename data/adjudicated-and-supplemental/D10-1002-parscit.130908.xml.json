{"algorithms":{"#text":"\n","@version":"110505","algorithm":{"#tail":"\n","@name":"ParsCit","#text":"\n","@version":"110505","citationList":{"#tail":"\n","#text":"\n","citation":[{"#tail":"\n","date":{"#tail":"\n","#text":"2005"},"rawString":{"#tail":"\n","#text":"Eugene Charniak and Mark Johnson. 2005. Coarse-tofine n-best parsing and maxent discriminative reranking. In ACL."},"#text":"\n","marker":{"#tail":"\n","#text":"Charniak, Johnson, 2005"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"product model. The higher quality of the automatically parsed data results in a 0.3 point higher final F score (91.6 vs. 91.3) over the selftraining results in Huang and Harper (2009), which used a single grammar for parsing the unlabeled data. The product of the self-trained ST-Prod-Mult grammars achieves significantly higher accuracies with an F score of 92.5, a 0.7 improvement over the product model in Petrov (2010). 8Our ST-Reg grammars are trained in the same way as in Parser LP LR EX Charniak (2000) 89.9 89.5 37.2 Petrov and Klein (2007) 90.2 90.1 36.7 Carreras et al. (2008) 91.4 90.7 - Charniak and Johnson (2005) 91.8 91.2 44.8 Huang (2008) 92.2 91.2 43.5 Huang and Harper (2009)8 91.6 91.1 40.4 McClosky et al. (2006) 92.5 92.1 45.3 Petrov (2010) 92.0 91.7 41.9 Sagae and Lavie (2006) 93.2 91.0 - Fossum and Knight (2009) 93.2 91.7 - Zhang et al. (2009) 93.3 92.0 - Best Single 91.8 91.4 40.3 This Paper Best Product 92.7 92.2 43.1 Table 7: Final test set accuracies on WSJ. Although our models are based on purely generative PCFG grammars, our best product model performs competitively to the self-trained two-step discriminative reranking parser of McClosky et al. (2006), which makes use of many non-local re","@endWordPosition":"5305","@position":"32485","annotationId":"T1","@startWordPosition":"5302","@citStr":"Charniak and Johnson (2005)"},{"#tail":"\n","#text":"ccuracies can be achieved by training grammars on disjoint sets of automatically labeled data. Two primary factors appear to be determining the efficacy of our self-training approach. First, the accuracy of the model used for parsing the unlabeled data is important for the accuracy of the resulting single self-trained grammars. Second, the diversity of the individual grammars controls the gains that can be obtained by combining multiple grammars into a product model. Our most accurate single grammar achieves an F score of 91.6 on the WSJ test set, rivaling discriminative reranking approaches (Charniak and Johnson, 2005) and products of latent variable grammars (Petrov, 2010), despite being a single generative PCFG. Our most accurate product model achieves an F score of 92.5 without the use of discriminative reranking and comes close to the best known numbers on this test set (Zhang et al., 2009). In future work, we plan to investigate additional methods for increasing the diversity of our selftrained models. One possibility would be to utilize more unlabeled data or to identify additional ways to bias the models. It would also be interesting to determine whether further increasing the accuracy of the model u","@endWordPosition":"5688","@position":"34801","annotationId":"T2","@startWordPosition":"5685","@citStr":"Charniak and Johnson, 2005"}]},"title":{"#tail":"\n","#text":"Coarse-tofine n-best parsing and maxent discriminative reranking."},"booktitle":{"#tail":"\n","#text":"In ACL."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Eugene Charniak"},{"#tail":"\n","#text":"Mark Johnson"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2010"},"rawString":{"#tail":"\n","#text":"Slav Petrov. 2010. Products of random latent variable grammars. In HLT-NAACL."},"#text":"\n","marker":{"#tail":"\n","#text":"Petrov, 2010"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"ly splitting (and potentially merging back) each observed treebank category into a number of increasingly refined latent subcategories. The Expectation Maximization (EM) algorithm is used to train the model, guaranteeing that each EM iteration will increase the training likelihood. However, because the latent variable grammars are not explicitly regularized, EM keeps fitting the training data and eventually begins overfitting (Liang et al., 2007). Moreover, EM is a local method, making no promises regarding the final point of convergence when initialized from different random seeds. Recently, Petrov (2010) showed that substantial differences between the learned grammars remain, even if the hierarchical splitting reduces the variance across independent runs of EM. In order to counteract the overfitting behavior, Petrov et al. (2006) introduced a linear smoothing procedure that allows training grammars for 6 splitmerge (SM) rounds without overfitting. The increased expressiveness of the model, combined with the more robust parameter estimates provided by the smoothing, results in a nice increase in parsing accuracy on a held-out set. However, as reported by Petrov (2009) and Huang and Harper (200","@endWordPosition":"312","@position":"2104","annotationId":"T3","@startWordPosition":"311","@citStr":"Petrov (2010)"},{"#tail":"\n","#text":"held-out set for model selection. The observation of variation is not surprising; EM\u2019s tendency to get stuck in local maxima has been studied extensively in the literature, resulting in various proposals for model selection methods (e.g., see 12 Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 12\u201322, MIT, Massachusetts, USA, 9-11 October 2010. cï¿½2010 Association for Computational Linguistics Burnham and Anderson (2002)). What is perhaps more surprising is that the different latent variable grammars seem to capture complementary aspects of the data. Petrov (2010) showed that a simple randomization scheme produces widely varying grammars. Quite serendipitously, these grammars can be combined into an unweighted product model that substantially outperforms the individual grammars. In this paper, we combine the ideas of selftraining and product models and show that both techniques provide complementary effects. We hypothesize that the main factors contributing to the final accuracy of the product model of self-trained grammars are (i) the accuracy of the grammar used to parse the unlabeled data for retraining (single grammar versus product of grammars) an","@endWordPosition":"614","@position":"4031","annotationId":"T4","@startWordPosition":"613","@citStr":"Petrov (2010)"},{"#tail":"\n","#text":"d of parse trees and sentences. To allocate the grammar complexity only where needed, a simple split-and-merge procedure is applied. In every splitmerge (SM) round, each latent variable is first split in two and the model is re-estimated. A likelihood criterion is used to merge back the least useful splits (50% merge rate for these experiments). This iterative refinement proceeds for 7 rounds, at which point parsing performance on a held-out set levels off and training becomes prohibitively slow. Since EM is a local method, different initializations will result in different grammars. In fact, Petrov (2010) recently showed that this EMalgorithm is very unstable and converges to widely varying local maxima. These local maxima corre3Non-terminal subconstituents of EDITED nodes are removed so that the terminal constituents become immediate children of a single EDITED node, adjacent EDITED nodes are merged, and they are ignored for span calculations of the other constituents. spond to different high quality latent variable grammars that have captured different types of patterns in the data. Because the individual models\u2019 mistakes are independent to some extent, multiple grammars can be effectively c","@endWordPosition":"1598","@position":"10206","annotationId":"T5","@startWordPosition":"1597","@citStr":"Petrov (2010)"},{"#tail":"\n","#text":"f-training. This is very useful for practical reasons because a single grammar is faster to parse with and requires less memory than the product model. The product of the SM6 ST-Prod grammars also achieves a 0.2 higher F score compared to the product of the SM6 ST-Reg grammars, but the product of the SM7 ST-Prod grammars has the same performance as the product of the SM7 ST-Reg grammars. This could be due to the fact that the ST-Prod grammars are no more diverse than the ST-Reg grammars, as we will show in Section 5. 4.4 ST-Prod-Mult Training When creating a product model of regular grammars, Petrov (2010) used a different random seed for each model and conjectured that the effectiveness of the product grammars stems from the resulting diversity of the individual grammars. Two ways to systematically introduce bias into individual models are to either modify the feature sets (Baldridge and Osborne, 2008; Smith and Osborne, 2007) or to change the training distributions of the individual models (Breiman, 1996). Petrov (2010) attempted to use the second method to train individual grammars on either disjoint or overlapping subsets of the treebank, but observed a performance drop in individual gramma","@endWordPosition":"3037","@position":"18947","annotationId":"T6","@startWordPosition":"3036","@citStr":"Petrov (2010)"},{"#tail":"\n","#text":"er of product models enforces that the joint prediction of their product has to be licensed by all individual experts. One possible explanation of the observation in the previous subsection is that with the addition of more latent variables, the individual grammars become more deeply specialized on certain aspects of the training data. This specialization leads to greater diversity in their prediction preferences, especially in the presence of a small training set. On the other hand, the self-labeled training set size is much larger, and so the specialization process is therefore slowed down. Petrov (2010) showed that the individually learned grammars are indeed very diverse by looking at the distribution of latent annotations across the treebank categories, as well as the variation in overall and individual category F scores (see Figure 1). However, these measures do not directly relate to the diversity of the prediction preferences of the grammars, as we observed similar patterns in the regular and self-trained models. Given a sentence s and a set of grammars !9 _ {G1, Â· Â· Â· , GJ, recall that the decoding algorithm of the product model (Petrov, 2010) searches for the best tree T such that the","@endWordPosition":"4008","@position":"24920","annotationId":"T7","@startWordPosition":"4007","@citStr":"Petrov (2010)"},{"#tail":"\n","#text":"wire grammars. The product of the ST-Prod-Mult grammars provides further and significant improvement in F score. 6 Final Results We evaluated the best single self-trained grammar (SM7 ST-Prod), as well as the product of the SM7 ST-Prod-Mult grammars on the WSJ test set. Table 7 compares these two grammars to a large body of related work grouped into single parsers (SINGLE), discriminative reranking approaches (RE), self-training (SELF), and system combinations (COMBO). Our best single grammar achieves an accuracy that is only slightly worse (91.6 vs. 91.8 in F score) than the product model in Petrov (2010). This is made possible by self-training on the output of a high quality product model. The higher quality of the automatically parsed data results in a 0.3 point higher final F score (91.6 vs. 91.3) over the selftraining results in Huang and Harper (2009), which used a single grammar for parsing the unlabeled data. The product of the self-trained ST-Prod-Mult grammars achieves significantly higher accuracies with an F score of 92.5, a 0.7 improvement over the product model in Petrov (2010). 8Our ST-Reg grammars are trained in the same way as in Parser LP LR EX Charniak (2000) 89.9 89.5 37.2 P","@endWordPosition":"5185","@position":"31785","annotationId":"T8","@startWordPosition":"5184","@citStr":"Petrov (2010)"},{"#tail":"\n","#text":"omatically labeled data. Two primary factors appear to be determining the efficacy of our self-training approach. First, the accuracy of the model used for parsing the unlabeled data is important for the accuracy of the resulting single self-trained grammars. Second, the diversity of the individual grammars controls the gains that can be obtained by combining multiple grammars into a product model. Our most accurate single grammar achieves an F score of 91.6 on the WSJ test set, rivaling discriminative reranking approaches (Charniak and Johnson, 2005) and products of latent variable grammars (Petrov, 2010), despite being a single generative PCFG. Our most accurate product model achieves an F score of 92.5 without the use of discriminative reranking and comes close to the best known numbers on this test set (Zhang et al., 2009). In future work, we plan to investigate additional methods for increasing the diversity of our selftrained models. One possibility would be to utilize more unlabeled data or to identify additional ways to bias the models. It would also be interesting to determine whether further increasing the accuracy of the model used for automatically labeling the unlabeled data can en","@endWordPosition":"5696","@position":"34857","annotationId":"T9","@startWordPosition":"5695","@citStr":"Petrov, 2010"}]},"title":{"#tail":"\n","#text":"Products of random latent variable grammars."},"booktitle":{"#tail":"\n","#text":"In HLT-NAACL."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"Slav Petrov"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2009"},"rawString":{"#tail":"\n","#text":"Hui Zhang, Min Zhang, Chew Lim Tan, and Haizhou Li. 2009. K-best combination of syntactic parsers. In EMNLP, pages 1552\u20131560."},"#text":"\n","pages":{"#tail":"\n","#text":"1552--1560"},"marker":{"#tail":"\n","#text":"Zhang, Zhang, Tan, Li, 2009"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"roduct of the self-trained ST-Prod-Mult grammars achieves significantly higher accuracies with an F score of 92.5, a 0.7 improvement over the product model in Petrov (2010). 8Our ST-Reg grammars are trained in the same way as in Parser LP LR EX Charniak (2000) 89.9 89.5 37.2 Petrov and Klein (2007) 90.2 90.1 36.7 Carreras et al. (2008) 91.4 90.7 - Charniak and Johnson (2005) 91.8 91.2 44.8 Huang (2008) 92.2 91.2 43.5 Huang and Harper (2009)8 91.6 91.1 40.4 McClosky et al. (2006) 92.5 92.1 45.3 Petrov (2010) 92.0 91.7 41.9 Sagae and Lavie (2006) 93.2 91.0 - Fossum and Knight (2009) 93.2 91.7 - Zhang et al. (2009) 93.3 92.0 - Best Single 91.8 91.4 40.3 This Paper Best Product 92.7 92.2 43.1 Table 7: Final test set accuracies on WSJ. Although our models are based on purely generative PCFG grammars, our best product model performs competitively to the self-trained two-step discriminative reranking parser of McClosky et al. (2006), which makes use of many non-local reranking features. Our parser also performs comparably to other system combination approaches (Sagae and Lavie, 2006; Fossum and Knight, 2009; Zhang et al., 2009) with higher recall and lower precision, Huang and Harper (2009) except that we k","@endWordPosition":"5350","@position":"32727","annotationId":"T10","@startWordPosition":"5347","@citStr":"Zhang et al. (2009)"},{"#tail":"\n","#text":" resulting single self-trained grammars. Second, the diversity of the individual grammars controls the gains that can be obtained by combining multiple grammars into a product model. Our most accurate single grammar achieves an F score of 91.6 on the WSJ test set, rivaling discriminative reranking approaches (Charniak and Johnson, 2005) and products of latent variable grammars (Petrov, 2010), despite being a single generative PCFG. Our most accurate product model achieves an F score of 92.5 without the use of discriminative reranking and comes close to the best known numbers on this test set (Zhang et al., 2009). In future work, we plan to investigate additional methods for increasing the diversity of our selftrained models. One possibility would be to utilize more unlabeled data or to identify additional ways to bias the models. It would also be interesting to determine whether further increasing the accuracy of the model used for automatically labeling the unlabeled data can enhance performance even more. A simple but computationally expensive way to do this would be to parse the data with an SM7 product model. Finally, for this work, we always used products of 10 grammars, but we sometimes observe","@endWordPosition":"5735","@position":"35082","annotationId":"T11","@startWordPosition":"5732","@citStr":"Zhang et al., 2009"}]},"title":{"#tail":"\n","#text":"K-best combination of syntactic parsers."},"booktitle":{"#tail":"\n","#text":"In EMNLP,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Hui Zhang"},{"#tail":"\n","#text":"Min Zhang"},{"#tail":"\n","#text":"Chew Lim Tan"},{"#tail":"\n","#text":"Haizhou Li"}]}}]}}}}
