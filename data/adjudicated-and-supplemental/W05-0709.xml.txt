tural language processing, being a highly inflected and agglutinative language. In particular, this paper presents an in-depth investigation of the entity detection and recognition (EDR) task for Arabic. We start by highlighting why segmentation is a necessary prerequisite for EDR, continue by presenting a finite-state statistical segmenter, and then examine how the resulting segments can be better included into a mention detection system and an entity recognition system; both systems are statistical, build around the maximum entropy principle. Experiments on a clearly stated partition of the ACE 2004 data show that stem-based features can significantly improve the performance of the EDT system by 2 absolute F-measure points. The system presented here had a competitive performance in the ACE 2004 evaluation. 1 Introduction Information extraction is a crucial step toward understanding and processing language. One goal of information extraction tasks is to identify important conceptual information in a discourse. These tasks have applications in summarization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mini
raction tasks is to identify important conceptual information in a discourse. These tasks have applications in summarization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mining, question answering, language understanding, etc. In this paper we focus on the Entity Detection and Recognition task (EDR) for Arabic as described in ACE 2004 framework (ACE, 2004). The EDR has close ties to the named entity recognition (NER) and coreference resolution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions menti
 identify important conceptual information in a discourse. These tasks have applications in summarization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mining, question answering, language understanding, etc. In this paper we focus on the Entity Detection and Recognition task (EDR) for Arabic as described in ACE 2004 framework (ACE, 2004). The EDR has close ties to the named entity recognition (NER) and coreference resolution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions mentions, which can be ei
conceptual information in a discourse. These tasks have applications in summarization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mining, question answering, language understanding, etc. In this paper we focus on the Entity Detection and Recognition task (EDR) for Arabic as described in ACE 2004 framework (ACE, 2004). The EDR has close ties to the named entity recognition (NER) and coreference resolution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions mentions, which can be either named (e.g. 
ation in a discourse. These tasks have applications in summarization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mining, question answering, language understanding, etc. In this paper we focus on the Entity Detection and Recognition task (EDR) for Arabic as described in ACE 2004 framework (ACE, 2004). The EDR has close ties to the named entity recognition (NER) and coreference resolution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions mentions, which can be either named (e.g. John Mayor), nominal 
 These tasks have applications in summarization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mining, question answering, language understanding, etc. In this paper we focus on the Entity Detection and Recognition task (EDR) for Arabic as described in ACE 2004 framework (ACE, 2004). The EDR has close ties to the named entity recognition (NER) and coreference resolution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions mentions, which can be either named (e.g. John Mayor), nominal (the president) or
applications in summarization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mining, question answering, language understanding, etc. In this paper we focus on the Entity Detection and Recognition task (EDR) for Arabic as described in ACE 2004 framework (ACE, 2004). The EDR has close ties to the named entity recognition (NER) and coreference resolution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions mentions, which can be either named (e.g. John Mayor), nominal (the president) or pronominal (she, it)
rization, information retrieval (one can get al hits for Washington/person and not the ones for Washington/state or Washington/city), data mining, question answering, language understanding, etc. In this paper we focus on the Entity Detection and Recognition task (EDR) for Arabic as described in ACE 2004 framework (ACE, 2004). The EDR has close ties to the named entity recognition (NER) and coreference resolution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions mentions, which can be either named (e.g. John Mayor), nominal (the president) or pronominal (she, it). An entity is the agg
lution tasks, which have been the focus of several recent investigations (Bikel et al, 1997; Miller et al, 1998; Borthwick, 1999; Mikheev et al, 1999; Soon et al, 2001; Ng and Cardie, 2002; Florian et al, 2004), and have been at the center of evaluations such as: MUC-6, MUC-7, and the CoNLL?02 and CoNLL?03 shared tasks. Usually, in computational linguistics literature, a named entity is an instance of a location, a person, or an organization, and the NER task consists of identifying each of these occurrences. Instead, we will adopt the nomenclature of the Automatic Content Extraction program (NIST, 2004): we will call the instances of textual references to objects/abstractions mentions, which can be either named (e.g. John Mayor), nominal (the president) or pronominal (she, it). An entity is the aggregate of all the mentions (of any level) which refer to one conceptual entity. For instance, in the sentence President John Smith said he has no comments there are two mentions (named and pronomial) but only one entity, formed by the set {John Smith, he}. We separate the EDR task into two parts: a mention detection step, which identifies and classifies all the mentions in a text ? and a coreferenc
ominals and pronouns are also attached to the word they modify. In fact, most Arabic words are morphologically derived from a list of base forms or stems, to which prefixes and suffixes can be attached to form Arabic surface forms (blank-delimited words). In addition to the different forms of the Arabic word that result from the 63 derivational and inflectional process, most prepositions, conjunctions, pronouns, and possessive forms are attached to the Arabic surface word. It is these orthographic variations and complex morphological structure that make Arabic language processing challenging (Xu et al, 2001; Xu et al, 2002). Both tasks are performed with a statistical framework: the mention detection system is similar to the one presented in (Florian et al, 2004) and the coreference resolution system is similar to the one described in (Luo et al, 2004). Both systems are built around from the maximum-entropy technique (Berger et al, 1996). We formulate the mention detection task as a sequence classification problem. While this approach is language independent, it must be modified to accomodate the particulars of the Arabic language. The Arabic words may be composed of zero or more prefixes, follo
ouns are also attached to the word they modify. In fact, most Arabic words are morphologically derived from a list of base forms or stems, to which prefixes and suffixes can be attached to form Arabic surface forms (blank-delimited words). In addition to the different forms of the Arabic word that result from the 63 derivational and inflectional process, most prepositions, conjunctions, pronouns, and possessive forms are attached to the Arabic surface word. It is these orthographic variations and complex morphological structure that make Arabic language processing challenging (Xu et al, 2001; Xu et al, 2002). Both tasks are performed with a statistical framework: the mention detection system is similar to the one presented in (Florian et al, 2004) and the coreference resolution system is similar to the one described in (Luo et al, 2004). Both systems are built around from the maximum-entropy technique (Berger et al, 1996). We formulate the mention detection task as a sequence classification problem. While this approach is language independent, it must be modified to accomodate the particulars of the Arabic language. The Arabic words may be composed of zero or more prefixes, followed by a stem and
, to which prefixes and suffixes can be attached to form Arabic surface forms (blank-delimited words). In addition to the different forms of the Arabic word that result from the 63 derivational and inflectional process, most prepositions, conjunctions, pronouns, and possessive forms are attached to the Arabic surface word. It is these orthographic variations and complex morphological structure that make Arabic language processing challenging (Xu et al, 2001; Xu et al, 2002). Both tasks are performed with a statistical framework: the mention detection system is similar to the one presented in (Florian et al, 2004) and the coreference resolution system is similar to the one described in (Luo et al, 2004). Both systems are built around from the maximum-entropy technique (Berger et al, 1996). We formulate the mention detection task as a sequence classification problem. While this approach is language independent, it must be modified to accomodate the particulars of the Arabic language. The Arabic words may be composed of zero or more prefixes, followed by a stem and zero or more suffixes. We begin with a segmentation of the written text before starting the classification. This segmentation process consist
words). In addition to the different forms of the Arabic word that result from the 63 derivational and inflectional process, most prepositions, conjunctions, pronouns, and possessive forms are attached to the Arabic surface word. It is these orthographic variations and complex morphological structure that make Arabic language processing challenging (Xu et al, 2001; Xu et al, 2002). Both tasks are performed with a statistical framework: the mention detection system is similar to the one presented in (Florian et al, 2004) and the coreference resolution system is similar to the one described in (Luo et al, 2004). Both systems are built around from the maximum-entropy technique (Berger et al, 1996). We formulate the mention detection task as a sequence classification problem. While this approach is language independent, it must be modified to accomodate the particulars of the Arabic language. The Arabic words may be composed of zero or more prefixes, followed by a stem and zero or more suffixes. We begin with a segmentation of the written text before starting the classification. This segmentation process consists of separating the normal whitespace delimited words into (hypothesized) prefixes, stems, 
3 derivational and inflectional process, most prepositions, conjunctions, pronouns, and possessive forms are attached to the Arabic surface word. It is these orthographic variations and complex morphological structure that make Arabic language processing challenging (Xu et al, 2001; Xu et al, 2002). Both tasks are performed with a statistical framework: the mention detection system is similar to the one presented in (Florian et al, 2004) and the coreference resolution system is similar to the one described in (Luo et al, 2004). Both systems are built around from the maximum-entropy technique (Berger et al, 1996). We formulate the mention detection task as a sequence classification problem. While this approach is language independent, it must be modified to accomodate the particulars of the Arabic language. The Arabic words may be composed of zero or more prefixes, followed by a stem and zero or more suffixes. We begin with a segmentation of the written text before starting the classification. This segmentation process consists of separating the normal whitespace delimited words into (hypothesized) prefixes, stems, and suffixes, which become the subject of analysis (tokens). The resulting granularity 
y describes our mention detection system, explaining the different feature types we use. We focus in particular on the stem n-gram, prefix n-gram, and suffix n-gram features that are specific to a morphologically rich language such as Arabic. We describe in Section 5 our coreference resolution system where we also describe the advantage of using stem based features. Section 6 shows and discusses the different experimental results and Section 7 concludes the paper. 2 Why is Arabic Information Extraction difficult? The Arabic language, which is the mother tongue of more than 300 million people (Center, 2000), present significant challenges to many natural language processing applications. Arabic is a highly inflected and derived language. In Arabic morphology, most morphemes are comprised of a basic word form (the root or stem), to which many affixes can be attached to form Arabic words. The Arabic alphabet consists of 28 letters that can be extended to ninety by additional shapes, marks, and vowels (Tayli and AlSalamah, 1990). Unlike Latin-based alphabets, the orientation of writing in Arabic is from right to left. In written Arabic, short vowels are often omitted. Also, because variety in expre
and ? (to) can beattached as a prefix as in ??Q???? (to the company). A noun may carry a possessive pronoun as a suffix, such as in ?? D?Q?? (their company). For the EDR task, in this previous example, the Arabic blank-delimited word ?? D?Q?? should be split into two tokens: ??Q?? and ??. The first token ??Q?? is a mention that refers to an organization, whereas the second token ?? is also a mention, but one that may refer to a person. Also, the prepositions (i.e., H. and ?) not be considered a part of the mention. Arabic has two kinds of plurals: broken plurals and sound plurals (Wightwick and Gaafar, 1998; Chen and Gey, 2002). The formation of broken plurals is common, more complex and often irregular. As an example, the plural form of the noun ?g. P (man) is ?A g. P (men), which is formed by inserting the infix @. The plural form of the noun H. A J? (book) is I. J? (books), which is formed by deleting the infix @. The plural form and the singular form may also be completely different (e.g. ?  @Q?@  for woman, but ZA ?	 for women). The sound plurals are formed by adding plural suffixes to singular nouns (e.g., IkAK. meaning researcher): the plural suffix is H@ for feminine nouns in
s a prefix as in ??Q???? (to the company). A noun may carry a possessive pronoun as a suffix, such as in ?? D?Q?? (their company). For the EDR task, in this previous example, the Arabic blank-delimited word ?? D?Q?? should be split into two tokens: ??Q?? and ??. The first token ??Q?? is a mention that refers to an organization, whereas the second token ?? is also a mention, but one that may refer to a person. Also, the prepositions (i.e., H. and ?) not be considered a part of the mention. Arabic has two kinds of plurals: broken plurals and sound plurals (Wightwick and Gaafar, 1998; Chen and Gey, 2002). The formation of broken plurals is common, more complex and often irregular. As an example, the plural form of the noun ?g. P (man) is ?A g. P (men), which is formed by inserting the infix @. The plural form of the noun H. A J? (book) is I. J? (books), which is formed by deleting the infix @. The plural form and the singular form may also be completely different (e.g. ?  @Q?@  for woman, but ZA ?	 for women). The sound plurals are formed by adding plural suffixes to singular nouns (e.g., IkAK. meaning researcher): the plural suffix is H@ for feminine nouns in grammatical cases (e
 may find a subject marker as a combination of a prefix and a suffix as in ???K. A ?K (she meets them). In this example, the EDR system should be able to separate ???K. A ?K, to create two mentions ( H and ??). Because the two mentions belong to different entities, the EDR system should not chain them together. An Arabic word can potentially have a large number of variants, and some of the variants can be quite complex. As an example, consider the word A ?D JkAJ. ?? (and to her researchers) which contains two prefixes and one suffix ( A ? + ? ?kAK. + ? + ?). 3 Arabic Segmentation Lee et al (2003) demonstrates a technique for segmenting Arabic text and uses it as a morphological processing step in machine translation. A trigram language model was used to score and select among hypothesized segmentations determined by a set of prefix and suffix expansion rules. In our latest implementation of this algorithm, we have recast this segmentation strategy as the composition of three distinct finite state machines. The first machine, illustrated in Figure 1 encodes the prefix and suffix expansion rules, producing a lattice of possible segmentations. The second machine is a dictionary that acce
s used to score and select among hypothesized segmentations determined by a set of prefix and suffix expansion rules. In our latest implementation of this algorithm, we have recast this segmentation strategy as the composition of three distinct finite state machines. The first machine, illustrated in Figure 1 encodes the prefix and suffix expansion rules, producing a lattice of possible segmentations. The second machine is a dictionary that accepts characters and produces identifiers corresponding to dictionary entries. The final machine is a trigram language model, specifically a Kneser-Ney (Chen and Goodman, 1998) based backoff language model. Differing from (Lee et al, 2003), we have also introduced an explicit model for un1As an example, we do not chain mentions with different gender, number, etc. known words based upon a character unigram model, although this model is dominated by an empirically chosen unknown word penalty. Using 0.5M words from the combined Arabic Treebanks 1V2, 2V2 and 3V1, the dictionary based segmenter achieves a exact word match 97.8% correct segmentation. SEP/epsilon a/A# epsilon/# a/epsilon a/epsilon b/epsilon b/B UNK/epsilon c/C b/epsilon c/BC e/+E epsilon/+ d/epsilon d/epsi
m the combined Arabic Treebanks 1V2, 2V2 and 3V1, the dictionary based segmenter achieves a exact word match 97.8% correct segmentation. SEP/epsilon a/A# epsilon/# a/epsilon a/epsilon b/epsilon b/B UNK/epsilon c/C b/epsilon c/BC e/+E epsilon/+ d/epsilon d/epsilon epsilon/epsilon b/AB# b/A#B# e/+DE c/epsilon d/BCD e/+D+E Figure 1: Illustration of dictionary based segmentation finite state transducer 3.1 Bootstrapping In addition to the model based upon a dictionary of stems and words, we also experimented with models based upon character n-grams, similar to those used for Chinese segmentation (Sproat et al, 1996). For these models, both arabic characters and spaces, and the inserted prefix and suffix markers appear on the arcs of the finite state machine. Here, the language model is conditioned to insert prefix and suffix markers based upon the frequency of their appearance in n-gram character contexts that appear in the training data. The character based model alone achieves a 94.5% exact match segmentation accuracy, considerably less accurate then the dictionary based model. However, an analysis of the errors indicated that the character based model is more effective at segmenting words that do not 
 finite state machine. Here, the language model is conditioned to insert prefix and suffix markers based upon the frequency of their appearance in n-gram character contexts that appear in the training data. The character based model alone achieves a 94.5% exact match segmentation accuracy, considerably less accurate then the dictionary based model. However, an analysis of the errors indicated that the character based model is more effective at segmenting words that do not appear in the training data. We seeked to exploit this ability to generalize to improve the dictionary based model. As in (Lee et al, 2003), we used unsupervised training data which is automatically segmented to discover previously unseen stems. In our case, the character n-gram model is used to segment a portion of the Arabic Gigaword corpus. From this, we create a vocabulary of stems and affixes by requiring that tokens appear more than twice in the supervised training data or more than ten times in the unsupervised, segmented corpus. The resulting vocabulary, predominately of word stems, is 53K words, or about six times the vocabulary observed in the supervised training data. This represents about only 18% of the total number 
 corpora are based upon news data, we apply some small amount of regular expression based preprocessing. Arabic specific processing include removal of the characters tatweel (), and vowels. Also, the following characters are treated as an equivalence class during all lookups and processing: (1) ? ,? , and (2)  @ , @  ,  @ ,  @. We define a token and introduce whitespace boundaries between every span of one or more alphabetic or numeric characters. Each punctuation symbol is considered a separate token. Character classes, such as punctuation, are defined according to the Unicode Standard (Aliprand et al, 2004). 4 Mention Detection The mention detection task we investigate identifies, for each mention, four pieces of information: 1. the mention type: person (PER), organization (ORG), location (LOC), geopolitical entity (GPE), facility (FAC), vehicle (VEH), and weapon (WEA) 2. the mention level (named, nominal, pronominal, or premodifier) 3. the mention class (generic, specific, negatively quantified, etc.) 4. the mention sub-type, which is a sub-category of the mention type (ACE, 2004) (e.g. OrgGovernmental, FacilityPath, etc.). 4.1 System Description We formulate the mention detection problem as a 
a separate token. Character classes, such as punctuation, are defined according to the Unicode Standard (Aliprand et al, 2004). 4 Mention Detection The mention detection task we investigate identifies, for each mention, four pieces of information: 1. the mention type: person (PER), organization (ORG), location (LOC), geopolitical entity (GPE), facility (FAC), vehicle (VEH), and weapon (WEA) 2. the mention level (named, nominal, pronominal, or premodifier) 3. the mention class (generic, specific, negatively quantified, etc.) 4. the mention sub-type, which is a sub-category of the mention type (ACE, 2004) (e.g. OrgGovernmental, FacilityPath, etc.). 4.1 System Description We formulate the mention detection problem as a classification problem, which takes as input segmented Arabic text. We assign to each token in the text a label indicating whether it starts a specific mention, is inside a specific mention, or is outside any mentions. We use a maximum entropy Markov model (MEMM) classifier. The principle of maximum entropy states that when one searches among probability distributions that model the observed data (evidence), the preferred one is the one that maximizes the entropy (a measure of th
ityPath, etc.). 4.1 System Description We formulate the mention detection problem as a classification problem, which takes as input segmented Arabic text. We assign to each token in the text a label indicating whether it starts a specific mention, is inside a specific mention, or is outside any mentions. We use a maximum entropy Markov model (MEMM) classifier. The principle of maximum entropy states that when one searches among probability distributions that model the observed data (evidence), the preferred one is the one that maximizes the entropy (a measure of the uncertainty of the model) (Berger et al, 1996). One big advantage of this approach is that it can combine arbitrary and diverse types of information in making a classification decision. Our mention detection system predicts the four labels types associated with a mention through a cascade approach. It first predicts the boundary and the main entity type for each mention. Then, it uses the information regarding the type and boundary in different second-stage classifiers to predict the subtype, the mention level, and the mention class. After the first stage, when the boundary (starting, inside, or outside a mention) has been determined, the
h a different mention type than the stem of the word that contains them as constituents. 4.2 Stem n-gram Features We use a large set of features to improve the prediction of mentions. This set can be partitioned into 4 categories: lexical, syntactic, gazetteer-based, and those obtained by running other named-entity classifiers (with different tag sets). We use features such as the shallow parsing information associated with the tokens in a window of 3 tokens, POS, etc. The context of a current token ti is clearly one of the most important features in predicting whether ti is a mention or not (Florian et al, 2004). We denote these features as backward token tri-grams and forward token tri-grams for the previous and next context of ti respectively. For a token ti, the backward token n-gram feature will contains the previous n ? 1 tokens in the history (ti?n+1, . . . ti?1) and the forward token n-gram feature will contains the next n ? 1 tokens (ti+1, . . . ti+n?1). Because we are segmenting arabic words into multiple tokens, there is some concern that trigram contexts will no longer convey as much contextual information. Consider the following sentence extracted from the development set: H. Qj?? ? ??A 
a decision that I. J? ? (office) is the beginning of an organization. In our experiments, n is 3, therefore we use stem trigram features. 5 Coreference Resolution Coreference resolution (or entity recognition) is defined as grouping together mentions referring to the same object or entity. For example, in the following text, (I) ?John believes Mary to be the best student? three mentions ?John?, ?Mary?, ?student? are underlined. ?Mary? and ?student? are in the same entity since both refer to the same person. The coreference system system is similar to the Bell tree algorithm as described by (Luo et al, 2004). In our implementation, the link model between a candidate entity e and the current mention m is computed as PL(L = 1|e, m) ? maxmk?e P?L(L = 1|e, mk, m), (1) 2Thus, the difference to token n-grams is that the tokens of different type are removed from the streams, before the features are created. where mk is one mention in entity e, and the basic model building block P?L(L = 1|e, mk, m) is an exponential or maximum entropy model (Berger et al, 1996). For the start model, we use the following approximation: PS(S = 1|e1, e2, ? ? ? , et, m) ? 1 ? max 1?i?t PL(L = 1|ei, m) (2) The start model (cf
nt? are in the same entity since both refer to the same person. The coreference system system is similar to the Bell tree algorithm as described by (Luo et al, 2004). In our implementation, the link model between a candidate entity e and the current mention m is computed as PL(L = 1|e, m) ? maxmk?e P?L(L = 1|e, mk, m), (1) 2Thus, the difference to token n-grams is that the tokens of different type are removed from the streams, before the features are created. where mk is one mention in entity e, and the basic model building block P?L(L = 1|e, mk, m) is an exponential or maximum entropy model (Berger et al, 1996). For the start model, we use the following approximation: PS(S = 1|e1, e2, ? ? ? , et, m) ? 1 ? max 1?i?t PL(L = 1|ei, m) (2) The start model (cf. equation 2) says that the probability of starting a new entity, given the current mention m and the previous entities e1, e2, ? ? ? , et, is simply 1 minus the maximum link probability between the current mention and one of the previous entities. The maximum-entropy model provides us with a flexible framework to encode features into the the system. Our Arabic entity recognition system uses many language-indepedent features such as strict and partia
 is simply 1 minus the maximum link probability between the current mention and one of the previous entities. The maximum-entropy model provides us with a flexible framework to encode features into the the system. Our Arabic entity recognition system uses many language-indepedent features such as strict and partial string match, and distance features (Luo et al, 2004). In this paper, however, we focus on the addition of Arabic stem-based features. 5.1 Arabic Stem Match Feature Features using the word context (left and right tokens) have been shown to be very helpful in coreference resolution (Luo et al, 2004). For Arabic, since words are morphologically derived from a list of roots (stems), we expected that a feature based on the right and left stems would lead to improvement in system accuracy. Let m1 and m2 be two candidate mentions where a mention is a string of tokens (prefixes, stems, and suffixes) extracted from the segmented text. In order to make a decision in either linking the two mentions or not we use additional features such as: do the stems in m1 and m2 match, do stems in m1 match all stems in m2, do stems in m1 partially match stems in m2. We proceed similarly for prefixes and suffi
 J? ? + ?  @ + ? and ? + H. Qk + ?  @ + I. J? ? respectively. In our 67 development corpus, these two mentions are chained to the same entity. The stemming match feature in this case will contain information such us all stems of m2 match, which is a strong indicator that these mentions should be chained together. Features based on the words alone would not help this specific example, because the two strings m1 and m2 do not match. 6 Experiments 6.1 Data The system is trained on the Arabic ACE 2003 and part of the 2004 data. We introduce here a clearly defined and replicable split of the ACE 2004 data, so that future investigations can accurately and correctly compare against the results presented here. There are 689 Arabic documents in LDC?s 2004 release (version 1.4) of ACE data from three sources: the Arabic Treebank, a subset of the broadcast (bnews) and newswire (nwire) TDT-4 documents. The 178-document devtest is created by taking the last (in chronological order) 25% of documents in each of three sources: 38 Arabic treebank documents dating from ?20000715? (i.e., July 15, 2000) to ?20000815,? 76 bnews documents from ?20001205.1100.0489? (i.e., Dec. 05 of 2000 from 11:00pm to 04
000715? (i.e., July 15, 2000) to ?20000815,? 76 bnews documents from ?20001205.1100.0489? (i.e., Dec. 05 of 2000 from 11:00pm to 04:89am) to ?20001230.1100.1216,? and 64 nwire documents from ?20001206.1000.0050? to ?20001230.0700.0061.? The time span of the test set is intentionally non-overlapping with that of the training set within each data source, as this models how the system will perform in the real world. 6.2 Mention Detection We want to investigate the usefulness of stem ngram features in the mention detection system. As stated before, the experiments are run in the ACE?04 framework (NIST, 2004) where the system will identify mentions and will label them (cf. Section 4) with a type (person, organization, etc), a sub-type (OrgCommercial, OrgGovernmental, etc), a mention level (named, nominal, etc), and a class (specific, generic, etc). Detecting the mention boundaries (set of consecutive tokens) and their main type is one of the important steps of our mention detection system. The score that the ACE community uses (ACE value) attributes a higher importance (outlined by its weight) to the main type compared to other subtasks, such as the mention level and the class. Hence, to build our
subtasks 6.3 Coreference Resolution In this section, we present the coreference results on the devtest defined earlier. First, to see the effect of stem matching features, we compare two coreference systems: one with the stem features, the other without. We test the two systems on both ?true? and system mentions of the devtest set. ?True? mentions mean that input to the coreference system are mentions marked by human, while system mentions are output from the mention detection system. We report results with two metrics: ECM-F and ACEValue. ECM-F is an entity-constrained mention Fmeasure (cf. (Luo et al, 2004) for how ECM-F is computed), and ACE-Value is the official ACE evaluation metric. The result is shown in Table 4: the baseline numbers without stem features are listed under ?Base,? and the results of the coreference system with stem features are listed under ?Base+Stem.? On true mention, the stem matching features improve ECM-F from 77.7% to 80.0%, and ACE-value from 86.9% to 88.2%. The similar improvement is also observed on system mentions.The overall ECMF improves from 62.3% to 64.2% and the ACE value improves from 61.9 to 63.1%. Note that the increase on the ACE value is smaller than ECM-
 features. 69 Base Base+Stem ECM-F ACEVal ECM-F ACEVal Truth 77.7 86.9 80.0 88.2 System 62.3 61.9 64.2 63.1 Table 4: Effect of Arabic stemming features on coreference resolution. The row marked with ?Truth? represents the results with ?true? mentions while the row marked with ?System? represents that mentions are detected by the system. Numbers under ?ECMF? are Entity-Constrained-Mention F-measure and numbers under ?ACE-Val? are ACE-values. These types of features result in an improvement in both the mention detection and coreference resolution performance, as shown through experiments on the ACE 2004 Arabic data. The experiments are performed on a clearly specified partition of the data, so comparisons against the presented work can be correctly and accurately made in the future. In addition, we also report results on the official test data. The presented system has obtained competitive results in the ACE 2004 evaluation, being ranked amongst the top competitors. 8 Acknowledgements This work was partially supported by the Defense Advanced Research Projects Agency and monitored by SPAWAR under contract No. N66001-99-2-8916. The views and findings contained in this material are those of the
