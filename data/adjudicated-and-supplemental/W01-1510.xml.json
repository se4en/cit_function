{"algorithms":{"#text":"\n","@version":"110505","algorithm":[{"#tail":"\n","@name":"SectLabel","#text":"\n","@version":"110505","variant":{"@confidence":"0.001536","#tail":"\n","reference":{"#tail":"\n","@confidence":"0.998701114035088","#text":"\nAnne Abeille? and Marie-He?le`ne Candito. 2000.\nFTAG: A Lexicalized Tree Adjoining Grammar for\nFrench. In Anne Abeille? and Owen Rambow, edi-\ntors, Tree Adjoining Grammars: Formal, Computa-\ntional and Linguistic Aspects, pages 305?329. CSLI\npublications.\nTilman Becker and Patrice Lopez. 2000. Adapting\nHPSG-to-TAG compilation to wide-coverage gram-\nmars. In Proc. of TAG+5, pages 47?54.\nBob Carpenter. 1992. The Logic of Typed Feature\nStructures. Cambridge University Press.\nJohn Chen and K. Vijay-Shanker. 2000. Automated\nextraction of TAGs from the Penn Treebank. In\nProc. of IWPT 2000.\nDavid Chiang. 2000. Statistical parsing with an\nautomatically-extracted Tree Adjoining Grammar.\nIn Proc. of ACL 2000, pages 456?463.\nChristy Doran, Beth Ann Hockey, Anoop Sarkar,\nB. Srinivas, and Fei Xia. 2000. Evolution of the\nXTAG system. In Anne Abeille? and Owen Ram-\nbow, editors, Tree Adjoining Grammars: Formal,\nComputational and Linguistic Aspects, pages 371?\n403. CSLI publications.\nDan Flickinger, Stephen Oepen, Jun?ichi Tsujii, and\nHans Uszkoreit, editors. 2000. Natural Language\nEngineering ? Special Issue on Efficient Processing\nwith HPSG: Methods, Systems, Evaluation. Cam-\nbridge University Press.\nDan Flickinger. 2000. On building a more effi-\ncient grammar by exploiting types. Natural Lan-\nguage Engineering ? Special Issue on Efficient Pro-\ncessing with HPSG: Methods, Systems, Evaluation,\n6(1):15?28.\nHiroshi Kanayama, Kentaro Torisawa, Yutaka Mitsu-\nisi, and Jun?ichi Tsujii. 2000. Hybrid Japanese\nparser with hand-crafted grammar and statistics. In\nProc. of COLING 2000, pages 411?417.\nRonald Kaplan and Joan Bresnan. 1982. Lexical-\nFunctional Grammar: A formal system for gram-\nmatical representation. In Joan Bresnan, editor, The\nMental Representation of Grammatical Relations,\npages 173?281. The MIT Press.\nRobert Kasper, Bernd Kiefer, Klaus Netter, and\nK. Vijay-Shanker. 1995. Compilation of HPSG to\nTAG. In Proc. of ACL ?94, pages 92?99.\nM. Kay, J. Gawron, and P. Norvig. 1994. Verbmo-\nbil: A Translation System for Face-to-Face Dialog.\nCSLI Publications.\nTakaki Makino, Minoru Yoshida, Kentaro Torisawa,\nand Jun?ichi Tsujii. 1998. LiLFeS ? towards a\npractical HPSG parsers. In Proc. of COLING?ACL\n?98, pages 807?811.\nMitchell Marcus, Beatrice Santorini, and Mary Ann\nMarcinkiewicz. 1994. Building a large annotated\ncorpus of English: the Penn Treebank. Computa-\ntional Linguistics, 19(2):313?330.\nYutaka Mitsuishi, Kentaro Torisawa, and Jun?ichi Tsu-\njii. 1998. HPSG-style underspecified Japanese\ngrammar with wide coverage. In Proc. of\nCOLING?ACL ?98, pages 876?880.\nGu?ter Neumann. 1998. Automatic extraction of\nstochastic lexcalized tree grammars from treebanks.\nIn Proc. of TAG+4, pages 120?123.\nKenji Nishida, Kentaro Torisawa, and Jun?ichi Tsujii.\n1999. An efficient HPSG parsing algorithm with ar-\nray unification. In Proc. of NLPRS ?99, pages 144?\n149.\nCarl Pollard and Ivan A. Sag. 1994. Head-Driven\nPhrase Structure Grammar. University of Chicago\nPress and CSLI Publications.\nPeter Poller and Tilman Becker. 1998. Two-step TAG\nparsing revisited. In Proc. of TAG+4, pages 143?\n146.\nAnoop Sarkar and Shuly Wintner. 1999. Typing as a\nmeans for validating feature structures. In Proc.of\nCLIN ?99, pages 159?167.\nAnoop Sarkar, Fei Xia, and Aravind Joshi. 2000.\nSome experiments on indicators of parsing com-\nplexity for lexicalized grammars. In Proc. of COL-\nING 2000, pages 37?42.\nYves Schabes, Anne Abeille, and Aravind K. Joshi.\n1988. Parsing strategies with ?lexicalized? gram-\nmars: Application to Tree Adjoining Grammars. In\nProc. of 12th COLING ?92, pages 578?583.\nYuka Tateisi, Kentaro Torisawa, Yusuke Miyao, and\nJun?ichi Tsujii. 1998. Translating the XTAG En-\nglish grammar to HPSG. In Proc. of TAG+4, pages\n172?175.\nThe XTAG Research Group. 2001. A Lex-\nicalized Tree Adjoining Grammar for English.\nhttp://www.cis.upenn.edu/?xtag/.\nKentaro Torisawa, Kenji Nishida, Yusuke Miyao, and\nJun?ichi Tsujii. 2000. An HPSG parser with CFG\nfiltering. Natural Language Engineering ? Special\nIssue on Efficient Processing with HPSG: Methods,\nSystems, Evaluation, 6(1):63?80.\nGertjan van Noord. 1994. Head corner parsing for\nTAG. Computational Intelligence, 10(4):525?534.\nK. Vijay-Shanker and Aravind K. Joshi. 1988. Fea-\nture structures based Tree Adjoining Grammars. In\nProc. of 12th COLING ?92, pages 714?719.\nK. Vijay-Shanker. 1987. A Study of Tree Adjoining\nGrammars. Ph.D. thesis, Department of Computer\n& Information Science, University of Pennsylvania.\nFei Xia. 1999. Extracting Tree Adjoining Grammars\nfrom bracketed corpora. In Proc. of NLPRS ?99,\npages 398?403.\nNaoki Yoshinaga and Yusuke Miyao. 2001. Grammar\nconversion from FB-LTAG to HPSG. In Proc. of\nESSLLI 2001 Student Session. To appear.\nNaoki Yoshinaga, Yusuke Miyao, Kentaro Torisawa,\nand Jun?ichi Tsujii. 2001. Efficient LTAG parsing\nusing HPSG parsers. In Proc. of PACLING 2001.\nTo appear.\n"},"@no":"0","figure":[{"#tail":"\n","@confidence":"0.989420168421053","#text":"\n(1) and the dashed line indicates the adjoining\nSym : NP\nArg :\nSym : S\nArg :\nSym : S\n?1\n2\n1\n5\n3\nSym : S\nLeaf : NP\nDir : left\nFoot? : \n2\n1\nSym : VP\nLeaf : S\nDir : right\nFoot? : +\nSym : NP\nArg :\nSym : NP\nArg :\nSym : V\nSym : S\nSym : VP\nSym : V\nthink:\nloves:\nyou\n? A\n*\n? B\n4\n4\n7\n7\n8\n6\nSym : S\nLeaf : NP\nDir : left\nFoot? : \n5\nSym : S\nLeaf : NP\nDir : left\nFoot? : \n2\n1\n5\nSym : S\nLeaf : NP\nDir : left\nFoot? : \n2\n1\n3\n6\n8\nSym : S\nLeaf : NP\nDir : left\nFoot? : \n3\n6\nSym : S\nLeaf : NP\nDir : left\nFoot? : \n,\n5\nSym : S\nLeaf : NP\nDir : left\nFoot? : \n2\n1\n,\n4\n9\n9\n?1\nhe\n?2\n?4\n?3\nArg :\nArg :\nArg : Arg :\nArg :\nwhat\n? C\n"},{"#tail":"\n","@confidence":"0.992083055555556","#text":"\nS\nNP\nVP\nV PP\nP NP\nfor\nS\nNP VP\nV\nP NP\nfor\nlook look\ncut off\nPP\nlook_for\nPP\nlook_for\nidentifier\n"},{"#tail":"\n","@confidence":"0.9867232","#text":"\nPAd\nP\nP\nsubstitution\nall candidate initial trees\nfor substitution\n, ?\nnon-anchored subtree\nmulti-anchored trees without non-anchored subtrees\nit\nS\nNP VP\nN\nV\nis\nVP\nV\n?\nPP S\nP NP\nbreaking points\non\ntonext\nit\nS\nNP VP\nN\nV\nis\nVP\nV\n?\nPP S\nP NP\nit\nS\nNP VP\nN\nV\nis\nVP\nV\n?\nPP S\nP NP\n, ?\nAd\nP\non\ntonext\n"}],"bodyText":[{"#tail":"\n","@confidence":"0.980923045454545","#text":"\ntree ( 2). The adjunction rule is applied to con-\nstruct the branching marked with ?, where ?think?\ntakes as an argument a node whose Sym feature?s\nvalue is S. By applying the adjunction rule, the\nArg feature of the mother node (B) becomes a\nconcatenation list of both Arg features of 1 ( 8 )\nand 1 ( 5 ). Note that when the construction of\n1 is completed, the Arg feature of the trunk node\n(C) will be its former state (A). We can continue\nconstructing 1 as if nothing had happened.\nMulti-anchored elementary trees, which violate\nCondition 1, are divided into multiple canonical\nelementary trees. We call the cutting nodes in the\ndivided trees cut-off nodes (Figure 12). Note that\na cut-off node is marked by an identifier to pre-\nserve a co-occurrence relation among the multiple\nanchors. Figure 12 shows an example of the con-\nversion of a multi-anchored elementary tree for a\ncompound expression ?look for?. We first select\nan anchor ?look? as the syntactic head, and tra-\nverse the tree along the trunk from the root node\nS to the anchor ?look?. We then cut off the multi-\n"},{"#tail":"\n","@confidence":"0.994715894736842","#text":"\nanchored elementary tree at the node PP, and cut-\noff nodes PP in resulting single-anchored trees are\nmarked by an identifier look for.\nNon-canonical elementary trees violating Con-\ndition 2 have a non-anchored subtree which is\na subtree of depth 1 or above with no anchor.\nA non-anchored subtree is converted into multi-\nanchored trees by substituting the deepest node\n(Figure 13). Substituted nodes are marked as\nbreaking points to remember that the nodes orig-\ninate from the substitution nodes. In the resulting\ntrees, all subtrees are anchored so that we can ap-\nply the above conversion algorithms. Figure 13\nshows a conversion of a non-canonical elemen-\ntary tree for it-cleft. A substitution node P in the\nnon-anchored subtree is selected, and is substi-\ntuted by each initial tree. The substituted node\nP in resulting multi-anchored trees are marked as\nbreaking points.\nThe above algorithm gives the conversion of\nLTAG, and it can be easily extended to handle an\nFB-LTAG grammar by merely storing a feature\nstructure of each node into the Sym feature and\nLeaf feature together with the non-terminal sym-\nbol. Feature structure unification is executed by\nID grammar rules.\nThe strong equivalence is assured because only\nsubstitution/adjunction operations performed in\nLTAG are performed with the obtained HPSG-\nstyle grammar. This is because each element\nin the Arg feature selects only feature structures\ncorresponding to trees which can substitute/be\nadjoined by each leaf node of an elementary\ntree. By following a history of rule applications,\neach combination of elementary trees in LTAG\nderivation trees can be readily recovered. The\nstrong equivalence holds also for conversion of\nnon-canonical elementary trees. For trees violat-\n"},{"#tail":"\n","@confidence":"0.971216","#text":"\ntemplates in the XTAG English grammar (LTAG)\nand converted lexical entry templates correspond-\ning to them (HPSG): A: canonical elementary\ntrees, B: elementary trees violating only Condi-\ntion 1, C: elementary trees violating only Condi-\ntion 2, D: elementary trees violating both condi-\n"},{"#tail":"\n","@confidence":"0.991569","#text":"\nnodes from the substitution nodes owing to iden-\ntifiers, which recover the co-occurrence relation\nin the original elementary trees between the di-\nvided trees. For trees violating Condition 2, we\ncan identify substitution nodes in a combined tree\nbecause they are marked as breaking points, and\nwe can consider the combined tree as two trees in\nthe LTAG derivation.\n"},{"#tail":"\n","@confidence":"0.883007111111111","#text":"\nThe RenTAL system is implemented in LiL-\nFeS (Makino et al, 1998)2. LiLFeS is one of\nthe fastest inference engines for processing fea-\nture structure logic, and efficient HPSG parsers\nhave already been built on this system (Nishida\net al, 1999; Torisawa et al, 2000). We ap-\nplied our system to the XTAG English gram-\nmar (The XTAG Research Group, 2001)3, which\nis a large-scale FB-LTAG grammar for English.\n"},{"#tail":"\n","@confidence":"0.982200828571429","#text":"\nThe XTAG English grammar consists of 1,194 4\nelementary tree templates and around 45,000 lex-\nical items5. We successfully converted all the\nelementary tree templates in the XTAG English\ngrammar to HPSG lexical entry templates. Ta-\nble 1 shows the classifications of elementary tree\ntemplates of the XTAG English grammar, ac-\ncording to the conditions we introduced in Sec-\ntion 3, and also shows the number of correspond-\ning HPSG lexical entry templates. Conversion\ntook about 25 minutes CPU time on a 700 Mhz\nPentium III Xeon with four gigabytes main mem-\nory.\nThe original and the obtained grammar gener-\nated exactly the same number of derivation trees\nin the parsing experiment with 457 sentences\nfrom the ATIS corpus (Marcus et al, 1994)6 (the\naverage length is 6.32 words). This result empir-\nically attested the strong equivalence of our algo-\nrithm.\nTable 2 shows the average parsing time with\nthe LTAG and HPSG parsers. In Table 2, lem\nrefers to the LTAG parser (Sarkar et al, 2000),\nANSI C implementation of the two-phase pars-\ning algorithm that performs the head corner pars-\ning (van Noord, 1994) without features (phase\n1), and then executes feature unification (phase\n2). TNT refers to the HPSG parser (Torisawa et\nal., 2000), C++ implementation of the two-phase\nparsing algorithm that performs filtering with a\ncompiled CFG (phase 1) and then executes fea-\nture unification (phase 2). Table 2 clearly shows\nthat the HPSG parser is significantly faster than\nthe LTAG parser. This result implies that parsing\ntechniques for HPSG are also beneficial for LTAG\n"},{"#tail":"\n","@confidence":"0.997485875","#text":"\nthe parsers, and 61 sentences because the LTAG parser does\nnot produce correct derivation trees because of bugs in its\npreprocessor.\nparsing. We can say that the grammar conversion\nenables us to share HPSG parsing techniques in\nLTAG parsing. Another paper (Yoshinaga et al,\n2001) describes the detailed analysis on the factor\nof the difference of parsing performance.\n"},{"#tail":"\n","@confidence":"0.996417869565217","#text":"\nWe described the RenTAL system, a grammar\nconverter from FB-LTAG to HPSG. The grammar\nconversion guarantees the strong equivalence, and\nhence we can obtain an HPSG-style grammar\nequivalent to existing LTAG grammars. Experi-\nmental result showed that the system enabled to\nshare not only LTAG grammars, but also HPSG\nparsing techniques. This system will enable a\nvariety of resource sharing such as the sharing\nof the programming/grammar-development envi-\nronment (Makino et al, 1998; Sarkar and Wint-\nner, 1999) and grammar extraction methods from\nbracketed corpora (Xia, 1999; Chen and Vijay-\nShanker, 2000; Neumann, 1998). Although our\nsystem connects only FB-LTAG and HPSG, we\nbelieve that our approach can be extended to other\nformalisms such as Lexical-Functional Gram-\nmar (Kaplan and Bresnan, 1982).\nAcknowledgment The authors are indebted\nto Mr. Anoop Sarkar for his help in using his\nparser in our experiment. The authors would like\nto thank anonymous reviewers for their valuable\ncomments and criticisms on this paper.\n"}],"#text":"\n","sectionHeader":[{"#tail":"\n","@confidence":"0.999828","@genericHeader":"abstract","#text":"\n4 Experiments\n"},{"#tail":"\n","@confidence":"0.998396","@genericHeader":"conclusions","#text":"\n5 Conclusion\n"},{"#tail":"\n","@confidence":"0.991441","@genericHeader":"references","#text":"\nReferences\n"}],"tableCaption":[{"#tail":"\n","@confidence":"0.793381","#text":"\ning Condition 1, we can distinguish the cut-off\nTable 1: The classification of elementary tree\n"},{"#tail":"\n","@confidence":"0.8865125","#text":"\nTable 2: Parsing performance with the XTAG En-\nglish grammar for the ATIS corpus.\n"}],"footnote":[{"#tail":"\n","@confidence":"0.955879333333333","#text":"\n2The RenTAL system is available at:\nhttp://www-tsujii.is.s.u-tokyo.ac.jp/rental/\n3We used the grammar attached to the latest distribution\nof an LTAG parser which we used for the parsing experi-\nment. The parser is available at:\nftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz\n"},{"#tail":"\n","@confidence":"0.9424862","#text":"\n4We eliminated 32 elementary trees because the LTAG\nparser cannot produce correct derivation trees with them.\n5These lexical items are a subset of the original XTAG\nEnglish grammar distribution.\n6We eliminated 59 sentences because of a time-out of\n"}],"figureCaption":[{"#tail":"\n","@confidence":"0.90318475","#text":"\ntermines whether the next rule application is the\nadjunction rule or the substitution rule.\nFigure 11 shows an instance of rule applica-\ntions. The thick line indicates the adjoined tree\n"},{"#tail":"\n","@confidence":"0.931433","#text":"\nFigure 11: An example of rule applications\n"},{"#tail":"\n","@confidence":"0.843513","#text":"\nFigure 12: Division of a multi-anchored elemen-\ntary tree into single-anchored trees\n"},{"#tail":"\n","@confidence":"0.999468","#text":"\nFigure 13: Combination of a non-anchored subtree into anchored trees\n"}],"table":[{"#tail":"\n","@confidence":"0.845126","#text":"\ntions\nGrammar A B C D Total\nLTAG 326 764 54 50 1,194\nHPSG 326 1,992 1,083 2,474 5,875\n"},{"#tail":"\n","@confidence":"0.756682","#text":"\nParser Parse Time (sec.)\nlem 19.64\nTNT 0.77\n"}]}},{"#tail":"\n","@name":"ParsHed","#text":"\n","@version":"110505","variant":{"@confidence":"0.323653","#tail":"\n","@no":"0","address":[{"#tail":"\n","@confidence":"0.966913","#text":"Hongo 7-3-1, Bunkyo-ku, Tokyo, 113-0033, Japan"},{"#tail":"\n","@confidence":"0.895041","#text":"Asahidai 1-1, Tatsunokuchi-cho, Noumi-gun, Ishikawa, 923-1292, Japan"},{"#tail":"\n","@confidence":"0.546246","#text":"Kawaguchi Hon-cho 4-1-8, Kawaguchi-shi, Saitama, 332-0012, Japan"},{"#tail":"\n","@confidence":"0.921863","#text":"Hongo 7-3-1, Bunkyo-ku, Tokyo, 113-0033, Japan"},{"#tail":"\n","@confidence":"0.950258","#text":"Kawaguchi Hon-cho 4-1-8, Kawaguchi-shi, Saitama, 332-0012, Japan"}],"#text":"\n","affiliation":[{"#tail":"\n","@confidence":"0.999937","#text":"Department of Information Science, Graduate school of Science, University of Tokyo"},{"#tail":"\n","@confidence":"0.997438","#text":"School of Information Science, Japan Advanced Institute of Science and Technology"},{"#tail":"\n","@confidence":"0.549403","#text":"Information and Human Behavior, PRESTO, Japan Science and Technology Corporation"},{"#tail":"\n","@confidence":"0.999903","#text":"Department of Computer Science, Graduate school of Information Science and Technology, University of Tokyo"},{"#tail":"\n","@confidence":"0.911665","#text":"CREST, JST (Japan Science and Technology Corporation)"}],"author":[{"#tail":"\n","@confidence":"0.996468","#text":"Naoki Yoshinaga Yusuke Miyao"},{"#tail":"\n","@confidence":"0.937564","#text":"Kentaro Torisawa"},{"#tail":"\n","@confidence":"0.989606","#text":"Junichi Tsujii"}],"abstract":{"#tail":"\n","@confidence":"0.9996314375","#text":"This paper describes the RenTAL system, which enables sharing resources in LTAG and HPSG formalisms by a method of grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques."},"title":{"#tail":"\n","@confidence":"0.9579035","#text":"Resource sharing among HPSG and LTAG communities by a method of grammar conversion from FB-LTAG to HPSG"},"email":[{"#tail":"\n","@confidence":"0.988555","#text":"fyoshinag,yusukeg@is.s.u-tokyo.ac.jp"},{"#tail":"\n","@confidence":"0.95611","#text":"torisawa@jaist.ac.jp"},{"#tail":"\n","@confidence":"0.978757","#text":"tsujii@is.s.u-tokyo.ac.jp"}]}},{"#tail":"\n","@name":"ParsCit","#text":"\n","@version":"110505","citationList":{"#tail":"\n","#text":"\n","citation":[{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"editor":{"#tail":"\n","#text":"In Anne Abeille? and Owen Rambow, editors,"},"rawString":{"#tail":"\n","#text":"Anne Abeille? and Marie-He?le`ne Candito. 2000. FTAG: A Lexicalized Tree Adjoining Grammar for French. In Anne Abeille? and Owen Rambow, editors, Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects, pages 305?329. CSLI publications."},"#text":"\n","pages":{"#tail":"\n","#text":"305--329"},"marker":{"#tail":"\n","#text":"Abeille, Candito, 2000"},"publisher":{"#tail":"\n","#text":"CSLI publications."},"title":{"#tail":"\n","#text":"FTAG: A Lexicalized Tree Adjoining Grammar for French."},"booktitle":{"#tail":"\n","#text":"Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Anne Abeille"},{"#tail":"\n","#text":"Marie-Hele`ne Candito"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"Tilman Becker and Patrice Lopez. 2000. Adapting HPSG-to-TAG compilation to wide-coverage grammars. In Proc. of TAG+5, pages 47?54."},"#text":"\n","pages":{"#tail":"\n","#text":"47--54"},"marker":{"#tail":"\n","#text":"Becker, Lopez, 2000"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"em to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al also translated LTAG into HPSG (Tateisi et al, 1998). However, their method depended on translator?s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al, 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the RenTAL system uses. Section","@endWordPosition":"826","@position":"5457","annotationId":"T1","@startWordPosition":"823","@citStr":"Becker and Lopez, 2000"}},"title":{"#tail":"\n","#text":"Adapting HPSG-to-TAG compilation to wide-coverage grammars."},"booktitle":{"#tail":"\n","#text":"In Proc. of TAG+5,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Tilman Becker"},{"#tail":"\n","#text":"Patrice Lopez"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1992"},"rawString":{"#tail":"\n","#text":"Bob Carpenter. 1992. The Logic of Typed Feature Structures. Cambridge University Press."},"#text":"\n","marker":{"#tail":"\n","#text":"Carpenter, 1992"},"publisher":{"#tail":"\n","#text":"Cambridge University Press."},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"veloped in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al, 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeille? and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the grammatical category. An ID grammar rule represents a relation between a mother and its daughters, and is independent of lexical characteristics. Figure 6 illustrates an example of bottom-up parsing with an HPSG grammar. First, lexical entries for ?can? and ?run? are unified respectively with the daughter feature structures of Canonical elementary trees Non-canonical elementary trees think S NP VP V S * it S NP VP N V VP V ? is Non-anchored subtree S NP VP V PP P NP for look P","@endWordPosition":"1474","@position":"8960","annotationId":"T2","@startWordPosition":"1473","@citStr":"Carpenter, 1992"}},"title":{"#tail":"\n","#text":"The Logic of Typed Feature Structures."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"Bob Carpenter"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"John Chen and K. Vijay-Shanker. 2000. Automated extraction of TAGs from the Penn Treebank. In Proc. of IWPT 2000."},"#text":"\n","marker":{"#tail":"\n","#text":"Chen, Vijay-Shanker, 2000"},"title":{"#tail":"\n","#text":"Automated extraction of TAGs from the Penn Treebank."},"booktitle":{"#tail":"\n","#text":"In Proc. of IWPT"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"John Chen"},{"#tail":"\n","#text":"K Vijay-Shanker"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"David Chiang. 2000. Statistical parsing with an automatically-extracted Tree Adjoining Grammar."},"#text":"\n","marker":{"#tail":"\n","#text":"Chiang, 2000"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"r (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to ","@endWordPosition":"356","@position":"2529","annotationId":"T3","@startWordPosition":"354","@citStr":"Chiang, 2000"}},"title":{"#tail":"\n","#text":"Statistical parsing with an automatically-extracted Tree Adjoining Grammar."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"David Chiang"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"In Proc. of ACL 2000, pages 456?463."},"#text":"\n","pages":{"#tail":"\n","#text":"456--463"},"marker":{"#tail":"\n","#text":"2000"},"booktitle":{"#tail":"\n","#text":"In Proc. of ACL"},"@valid":"true"},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"Christy Doran, Beth Ann Hockey, Anoop Sarkar, B. Srinivas, and Fei Xia. 2000. Evolution of the XTAG system. In Anne Abeille? and Owen Rambow, editors, Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects, pages 371? 403. CSLI publications."},"#text":"\n","pages":{"#tail":"\n","#text":"371--403"},"marker":{"#tail":"\n","#text":"Doran, Hockey, Sarkar, Srinivas, Xia, 2000"},"publisher":{"#tail":"\n","#text":"CSLI publications."},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":" Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an","@endWordPosition":"433","@position":"3076","annotationId":"T4","@startWordPosition":"430","@citStr":"Doran et al, 2000"},{"#tail":"\n","#text":"ure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al, 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeille? and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the grammatical category. An ID grammar ","@endWordPosition":"1405","@position":"8515","annotationId":"T5","@startWordPosition":"1402","@citStr":"Doran et al, 2000"}]},"title":{"#tail":"\n","#text":"Evolution of the XTAG system."},"booktitle":{"#tail":"\n","#text":"In Anne Abeille? and Owen Rambow, editors, Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Christy Doran"},{"#tail":"\n","#text":"Beth Ann Hockey"},{"#tail":"\n","#text":"Anoop Sarkar"},{"#tail":"\n","#text":"B Srinivas"},{"#tail":"\n","#text":"Fei Xia"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"editor":{"#tail":"\n","#text":"Dan Flickinger, Stephen Oepen, Jun?ichi Tsujii, and Hans Uszkoreit, editors."},"rawString":{"#tail":"\n","#text":"Dan Flickinger, Stephen Oepen, Jun?ichi Tsujii, and Hans Uszkoreit, editors. 2000. Natural Language Engineering ? Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation. Cambridge University Press."},"#text":"\n","marker":{"#tail":"\n","#text":"2000"},"publisher":{"#tail":"\n","#text":"Cambridge University Press."},"booktitle":{"#tail":"\n","#text":"Natural Language Engineering ? Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation."},"@valid":"true"},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"Dan Flickinger. 2000. On building a more efficient grammar by exploiting types. Natural Language Engineering ? Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation, 6(1):15?28."},"#text":"\n","pages":{"#tail":"\n","#text":"6--1"},"marker":{"#tail":"\n","#text":"Flickinger, 2000"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"n for Condition 1 b) Exception for Condition 2 Figure 7: A canonical elementary tree and exceptions an ID grammar rule. The feature structure of the mother node is determined as a result of these unifications. The center of Figure 6 shows a rule application to ?can run? and ?we?. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulat","@endWordPosition":"1692","@position":"10197","annotationId":"T6","@startWordPosition":"1691","@citStr":"Flickinger, 2000"}},"title":{"#tail":"\n","#text":"On building a more efficient grammar by exploiting types. Natural Language Engineering ?"},"booktitle":{"#tail":"\n","#text":"Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"Dan Flickinger"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"Hiroshi Kanayama, Kentaro Torisawa, Yutaka Mitsuisi, and Jun?ichi Tsujii. 2000. Hybrid Japanese parser with hand-crafted grammar and statistics. In Proc. of COLING 2000, pages 411?417."},"#text":"\n","pages":{"#tail":"\n","#text":"411--417"},"marker":{"#tail":"\n","#text":"Kanayama, Torisawa, Mitsuisi, Tsujii, 2000"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"nd Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, ","@endWordPosition":"360","@position":"2552","annotationId":"T7","@startWordPosition":"357","@citStr":"Kanayama et al, 2000"},{"#tail":"\n","#text":" efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must have only one anchor. Sym: Arg: Sym : Leaf : Dir : right left , Foot?: + _ * think V S","@endWordPosition":"1743","@position":"10513","annotationId":"T8","@startWordPosition":"1740","@citStr":"Kanayama et al, 2000"}]},"title":{"#tail":"\n","#text":"Hybrid Japanese parser with hand-crafted grammar and statistics."},"booktitle":{"#tail":"\n","#text":"In Proc. of COLING"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Hiroshi Kanayama"},{"#tail":"\n","#text":"Kentaro Torisawa"},{"#tail":"\n","#text":"Yutaka Mitsuisi"},{"#tail":"\n","#text":"Junichi Tsujii"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1982"},"editor":{"#tail":"\n","#text":"In Joan Bresnan, editor,"},"rawString":{"#tail":"\n","#text":"Ronald Kaplan and Joan Bresnan. 1982. LexicalFunctional Grammar: A formal system for grammatical representation. In Joan Bresnan, editor, The Mental Representation of Grammatical Relations, pages 173?281. The MIT Press."},"#text":"\n","pages":{"#tail":"\n","#text":"173--281"},"marker":{"#tail":"\n","#text":"Kaplan, Bresnan, 1982"},"publisher":{"#tail":"\n","#text":"The MIT Press."},"title":{"#tail":"\n","#text":"LexicalFunctional Grammar: A formal system for grammatical representation."},"booktitle":{"#tail":"\n","#text":"The Mental Representation of Grammatical Relations,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Ronald Kaplan"},{"#tail":"\n","#text":"Joan Bresnan"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1995"},"rawString":{"#tail":"\n","#text":"Robert Kasper, Bernd Kiefer, Klaus Netter, and K. Vijay-Shanker. 1995. Compilation of HPSG to TAG. In Proc. of ACL ?94, pages 92?99."},"#text":"\n","pages":{"#tail":"\n","#text":"92--99"},"marker":{"#tail":"\n","#text":"Kasper, Kiefer, Netter, Vijay-Shanker, 1995"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"es trees, and map them to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al also translated LTAG into HPSG (Tateisi et al, 1998). However, their method depended on translator?s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al, 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the Re","@endWordPosition":"822","@position":"5432","annotationId":"T9","@startWordPosition":"819","@citStr":"Kasper et al, 1995"},{"#tail":"\n","#text":"f : Dir : right left , Foot?: + _ * think V S VP S NP V think: S VP S NP foot node anchor trunk * substitution node Sym : Leaf : Dir : Foot?: Figure 8: A conversion from a canonical elementary tree into an HPSG lexical entry mother  Sym : 1 Arg : 2       h Sym : 3 Arg : h i i substitution node X X X X X 2 4 Arg : * 2 4 Sym : 1 Leaf : 3 Dir : left Foot? :  3 5 j 2 + 3 5 trunk node Figure 9: Left substitution rule Condition 2 All branchings in a tree must contain trunk nodes. Trunk nodes are nodes on a trunk, which is a path from an anchor to the root node (the thick lines in Figure 7) (Kasper et al, 1995). Condition 1 guarantees that a canonical elementary tree has only one trunk, and Condition 2 guarantees that each branching consists of a trunk node, a leaf node, and their mother (also a trunk node). The righthand side of Figure 7 shows elementary trees violating the conditions. Canonical elementary trees can be directly converted to HPSG lexical entries by regarding each leaf node as a subcategorization element of the anchor, and by encoding them into a list. Figure 8 shows an example of the conversion. By following the trunk from the anchor ?think? to the mother  Sym : 1 Arg : 2  3   ","@endWordPosition":"1985","@position":"11687","annotationId":"T10","@startWordPosition":"1982","@citStr":"Kasper et al, 1995"}]},"title":{"#tail":"\n","#text":"Compilation of HPSG to TAG."},"booktitle":{"#tail":"\n","#text":"In Proc. of ACL ?94,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Robert Kasper"},{"#tail":"\n","#text":"Bernd Kiefer"},{"#tail":"\n","#text":"Klaus Netter"},{"#tail":"\n","#text":"K Vijay-Shanker"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1994"},"rawString":{"#tail":"\n","#text":"M. Kay, J. Gawron, and P. Norvig. 1994. Verbmobil: A Translation System for Face-to-Face Dialog. CSLI Publications."},"#text":"\n","marker":{"#tail":"\n","#text":"Kay, Gawron, Norvig, 1994"},"publisher":{"#tail":"\n","#text":"CSLI Publications."},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"e of the mother node is determined as a result of these unifications. The center of Figure 6 shows a rule application to ?can run? and ?we?. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a ca","@endWordPosition":"1715","@position":"10336","annotationId":"T11","@startWordPosition":"1712","@citStr":"Kay et al, 1994"}},"title":{"#tail":"\n","#text":"Verbmobil: A Translation System for Face-to-Face Dialog."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"M Kay"},{"#tail":"\n","#text":"J Gawron"},{"#tail":"\n","#text":"P Norvig"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1998"},"rawString":{"#tail":"\n","#text":"Takaki Makino, Minoru Yoshida, Kentaro Torisawa, and Jun?ichi Tsujii. 1998. LiLFeS ? towards a practical HPSG parsers. In Proc. of COLING?ACL ?98, pages 807?811."},"#text":"\n","pages":{"#tail":"\n","#text":"807--811"},"marker":{"#tail":"\n","#text":"Makino, Yoshida, Torisawa, Tsujii, 1998"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":" 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parse","@endWordPosition":"437","@position":"3097","annotationId":"T12","@startWordPosition":"434","@citStr":"Makino et al, 1998"},{"#tail":"\n","#text":"n 1, C: elementary trees violating only Condition 2, D: elementary trees violating both conditions Grammar A B C D Total LTAG 326 764 54 50 1,194 HPSG 326 1,992 1,083 2,474 5,875 nodes from the substitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/","@endWordPosition":"3393","@position":"19050","annotationId":"T13","@startWordPosition":"3390","@citStr":"Makino et al, 1998"}]},"title":{"#tail":"\n","#text":"LiLFeS ? towards a practical HPSG parsers."},"booktitle":{"#tail":"\n","#text":"In Proc. of COLING?ACL ?98,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Takaki Makino"},{"#tail":"\n","#text":"Minoru Yoshida"},{"#tail":"\n","#text":"Kentaro Torisawa"},{"#tail":"\n","#text":"Junichi Tsujii"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1994"},"rawString":{"#tail":"\n","#text":"Mitchell Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz. 1994. Building a large annotated corpus of English: the Penn Treebank. Computational Linguistics, 19(2):313?330."},"#text":"\n","marker":{"#tail":"\n","#text":"Marcus, Santorini, Marcinkiewicz, 1994"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"cessfully converted all the elementary tree templates in the XTAG English grammar to HPSG lexical entry templates. Table 1 shows the classifications of elementary tree templates of the XTAG English grammar, according to the conditions we introduced in Section 3, and also shows the number of corresponding HPSG lexical entry templates. Conversion took about 25 minutes CPU time on a 700 Mhz Pentium III Xeon with four gigabytes main memory. The original and the obtained grammar generated exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al, 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al, 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) ","@endWordPosition":"3629","@position":"20524","annotationId":"T14","@startWordPosition":"3626","@citStr":"Marcus et al, 1994"}},"title":{"#tail":"\n","#text":"Building a large annotated corpus of English: the Penn Treebank. Computational Linguistics,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Mitchell Marcus"},{"#tail":"\n","#text":"Beatrice Santorini"},{"#tail":"\n","#text":"Mary Ann Marcinkiewicz"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1998"},"rawString":{"#tail":"\n","#text":"Yutaka Mitsuishi, Kentaro Torisawa, and Jun?ichi Tsujii. 1998. HPSG-style underspecified Japanese grammar with wide coverage. In Proc. of COLING?ACL ?98, pages 876?880."},"#text":"\n","pages":{"#tail":"\n","#text":"876--880"},"marker":{"#tail":"\n","#text":"Mitsuishi, Torisawa, Tsujii, 1998"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"igure 6 shows a rule application to ?can run? and ?we?. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must ","@endWordPosition":"1729","@position":"10427","annotationId":"T15","@startWordPosition":"1726","@citStr":"Mitsuishi et al, 1998"}},"title":{"#tail":"\n","#text":"HPSG-style underspecified Japanese grammar with wide coverage."},"booktitle":{"#tail":"\n","#text":"In Proc. of COLING?ACL ?98,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Yutaka Mitsuishi"},{"#tail":"\n","#text":"Kentaro Torisawa"},{"#tail":"\n","#text":"Junichi Tsujii"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1998"},"rawString":{"#tail":"\n","#text":"Gu?ter Neumann. 1998. Automatic extraction of stochastic lexcalized tree grammars from treebanks. In Proc. of TAG+4, pages 120?123."},"#text":"\n","pages":{"#tail":"\n","#text":"120--123"},"marker":{"#tail":"\n","#text":"Neumann, 1998"},"title":{"#tail":"\n","#text":"Automatic extraction of stochastic lexcalized tree grammars from treebanks."},"booktitle":{"#tail":"\n","#text":"In Proc. of TAG+4,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"Guter Neumann"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"1999"},"rawString":{"#tail":"\n","#text":"Kenji Nishida, Kentaro Torisawa, and Jun?ichi Tsujii. 1999. An efficient HPSG parsing algorithm with array unification. In Proc. of NLPRS ?99, pages 144? 149."},"#text":"\n","pages":{"#tail":"\n","#text":"144--149"},"marker":{"#tail":"\n","#text":"Nishida, Torisawa, Tsujii, 1999"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"75 nodes from the substitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consist","@endWordPosition":"3422","@position":"19226","annotationId":"T16","@startWordPosition":"3419","@citStr":"Nishida et al, 1999"}},"title":{"#tail":"\n","#text":"An efficient HPSG parsing algorithm with array unification."},"booktitle":{"#tail":"\n","#text":"In Proc. of NLPRS ?99,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Kenji Nishida"},{"#tail":"\n","#text":"Kentaro Torisawa"},{"#tail":"\n","#text":"Junichi Tsujii"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1994"},"rawString":{"#tail":"\n","#text":"Carl Pollard and Ivan A. Sag. 1994. Head-Driven Phrase Structure Grammar. University of Chicago Press and CSLI Publications."},"#text":"\n","marker":{"#tail":"\n","#text":"Pollard, Sag, 1994"},"publisher":{"#tail":"\n","#text":"University of Chicago Press and CSLI Publications."},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"rammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each forma","@endWordPosition":"240","@position":"1777","annotationId":"T17","@startWordPosition":"237","@citStr":"Pollard and Sag, 1994"}},"title":{"#tail":"\n","#text":"Head-Driven Phrase Structure Grammar."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Carl Pollard"},{"#tail":"\n","#text":"Ivan A Sag"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1998"},"rawString":{"#tail":"\n","#text":"Peter Poller and Tilman Becker. 1998. Two-step TAG parsing revisited. In Proc. of TAG+4, pages 143? 146."},"#text":"\n","pages":{"#tail":"\n","#text":"143--146"},"marker":{"#tail":"\n","#text":"Poller, Becker, 1998"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"matically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999;","@endWordPosition":"345","@position":"2458","annotationId":"T18","@startWordPosition":"342","@citStr":"Poller and Becker, 1998"}},"title":{"#tail":"\n","#text":"Two-step TAG parsing revisited."},"booktitle":{"#tail":"\n","#text":"In Proc. of TAG+4,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Peter Poller"},{"#tail":"\n","#text":"Tilman Becker"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1999"},"rawString":{"#tail":"\n","#text":"Anoop Sarkar and Shuly Wintner. 1999. Typing as a means for validating feature structures. In Proc.of CLIN ?99, pages 159?167."},"#text":"\n","pages":{"#tail":"\n","#text":"159--167"},"marker":{"#tail":"\n","#text":"Sarkar, Wintner, 1999"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":" (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing exper","@endWordPosition":"429","@position":"3057","annotationId":"T19","@startWordPosition":"426","@citStr":"Sarkar and Wintner, 1999"}},"title":{"#tail":"\n","#text":"Typing as a means for validating feature structures."},"booktitle":{"#tail":"\n","#text":"In Proc.of CLIN ?99,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Anoop Sarkar"},{"#tail":"\n","#text":"Shuly Wintner"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"Anoop Sarkar, Fei Xia, and Aravind Joshi. 2000."},"#text":"\n","marker":{"#tail":"\n","#text":"Sarkar, Xia, Joshi, 2000"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"ced in Section 3, and also shows the number of corresponding HPSG lexical entry templates. Conversion took about 25 minutes CPU time on a 700 Mhz Pentium III Xeon with four gigabytes main memory. The original and the obtained grammar generated exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al, 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al, 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) and then executes feature unification (phase 2). Table 2 clearly shows that the HPSG parser is significantly faster than the LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 element","@endWordPosition":"3673","@position":"20769","annotationId":"T20","@startWordPosition":"3670","@citStr":"Sarkar et al, 2000"}},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Anoop Sarkar"},{"#tail":"\n","#text":"Fei Xia"},{"#tail":"\n","#text":"Aravind Joshi"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"Some experiments on indicators of parsing complexity for lexicalized grammars. In Proc. of COLING 2000, pages 37?42."},"#text":"\n","pages":{"#tail":"\n","#text":"37--42"},"marker":{"#tail":"\n","#text":"2000"},"title":{"#tail":"\n","#text":"Some experiments on indicators of parsing complexity for lexicalized grammars."},"booktitle":{"#tail":"\n","#text":"In Proc. of COLING"},"@valid":"true"},{"#tail":"\n","date":{"#tail":"\n","#text":"1988"},"rawString":{"#tail":"\n","#text":"Yves Schabes, Anne Abeille, and Aravind K. Joshi. 1988. Parsing strategies with ?lexicalized? grammars: Application to Tree Adjoining Grammars. In Proc. of 12th COLING ?92, pages 578?583."},"#text":"\n","pages":{"#tail":"\n","#text":"578--583"},"marker":{"#tail":"\n","#text":"Schabes, Abeille, Joshi, 1988"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"rictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the RenTAL system uses. Section 4 presents the evaluation of the RenTAL system through experiments with the XTAG English grammar. Section 5 concludes this study and addresses future works. 2 Background 2.1 Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG) LTAG (Schabes et al, 1988) is a grammar formalism that provides syntactic analyses for a sentence by composing elementary trees with two operaArg : we can run ID grammar rule unify Sym : NP Arg : Sym : VP Arg : VP Sym : VP Arg : NP Arg : Sym : Arg : 2 3 2 unify 3 unify ID grammar rule we can run Sym : NP Arg : Sym : VP Arg : VP Sym : VP Arg : NP Arg : NP Sym : Arg : Arg : 1 1 | 2 Arg : 2 unify we can run Sym : NP Arg : Sym : VP Arg : VP Sym : VP Arg : NP Arg : NP Arg : Figure 6: Parsing with an HPSG grammar S NP VP V run NP N We substitution ?1 ?2 S NP VP V run N We Figure 3: Substitution VP VP V can * adjunction ?1 S ","@endWordPosition":"965","@position":"6317","annotationId":"T21","@startWordPosition":"962","@citStr":"Schabes et al, 1988"}},"title":{"#tail":"\n","#text":"Parsing strategies with ?lexicalized? grammars: Application to Tree Adjoining Grammars."},"booktitle":{"#tail":"\n","#text":"In Proc. of 12th COLING ?92,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Yves Schabes"},{"#tail":"\n","#text":"Anne Abeille"},{"#tail":"\n","#text":"Aravind K Joshi"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1998"},"rawString":{"#tail":"\n","#text":"Yuka Tateisi, Kentaro Torisawa, Yusuke Miyao, and Jun?ichi Tsujii. 1998. Translating the XTAG English grammar to HPSG. In Proc. of TAG+4, pages 172?175."},"#text":"\n","pages":{"#tail":"\n","#text":"172--175"},"marker":{"#tail":"\n","#text":"Tateisi, Torisawa, Miyao, Tsujii, 1998"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"on, and construct the type hierarchy from them. The lexicon converter module converts LTAG elementary tree templates into HPSG lexical entries. The derivation translator module takes HPSG parse S NP VP V run VP VP V can * NP N We ?1 ?2 ?1 anchor foot node * substitution node Initial tree Auxiliary tree Figure 2: Elementary trees trees, and map them to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al also translated LTAG into HPSG (Tateisi et al, 1998). However, their method depended on translator?s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al, 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions ","@endWordPosition":"773","@position":"5106","annotationId":"T22","@startWordPosition":"770","@citStr":"Tateisi et al, 1998"}},"title":{"#tail":"\n","#text":"Translating the XTAG English grammar to HPSG."},"booktitle":{"#tail":"\n","#text":"In Proc. of TAG+4,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Yuka Tateisi"},{"#tail":"\n","#text":"Kentaro Torisawa"},{"#tail":"\n","#text":"Yusuke Miyao"},{"#tail":"\n","#text":"Junichi Tsujii"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2001"},"note":{"#tail":"\n","#text":"http://www.cis.upenn.edu/?xtag/."},"rawString":{"#tail":"\n","#text":"The XTAG Research Group. 2001. A Lexicalized Tree Adjoining Grammar for English. http://www.cis.upenn.edu/?xtag/."},"#text":"\n","marker":{"#tail":"\n","#text":"Group, 2001"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":" Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parser with the obtained grammar achieved a significant speed-up against an existing LTAG parser (Yoshinaga et al, 2001). This result implies that parsing techniques for HPSG are also beneficial for LTAG parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Figure 1 depicts a brief sketch of the RenTAL system. The system consists of the following four modules: Tree converter, Type hierarchy extractor, Lexicon converter and Derivation translator. The","@endWordPosition":"521","@position":"3600","annotationId":"T23","@startWordPosition":"520","@citStr":"Group, 2001"},{"#tail":"\n","#text":"ary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al, 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeille? and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the ","@endWordPosition":"1398","@position":"8479","annotationId":"T24","@startWordPosition":"1397","@citStr":"Group, 2001"},{"#tail":"\n","#text":"al elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consists of 1,194 4 elementary tree templates and around 45,000 lexical items5. We successfully converted all the","@endWordPosition":"3442","@position":"19332","annotationId":"T25","@startWordPosition":"3441","@citStr":"Group, 2001"}]},"title":{"#tail":"\n","#text":"A Lexicalized Tree Adjoining Grammar for English."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"The XTAG Research Group"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2000"},"rawString":{"#tail":"\n","#text":"Kentaro Torisawa, Kenji Nishida, Yusuke Miyao, and Jun?ichi Tsujii. 2000. An HPSG parser with CFG filtering. Natural Language Engineering ? Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation, 6(1):63?80."},"#text":"\n","pages":{"#tail":"\n","#text":"6--1"},"marker":{"#tail":"\n","#text":"Torisawa, Nishida, Miyao, Tsujii, 2000"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"stitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consists of 1,194 4 elementary","@endWordPosition":"3426","@position":"19249","annotationId":"T26","@startWordPosition":"3423","@citStr":"Torisawa et al, 2000"},{"#tail":"\n","#text":"d exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al, 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al, 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) and then executes feature unification (phase 2). Table 2 clearly shows that the HPSG parser is significantly faster than the LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 elementary trees because the LTAG parser cannot produce correct derivation trees with them. 5These lexical items are a subset of the original XTAG English grammar distribution. 6We eliminated 59 sentences because of a time-out of the parsers, and 61 se","@endWordPosition":"3713","@position":"21014","annotationId":"T27","@startWordPosition":"3710","@citStr":"Torisawa et al., 2000"}]},"booktitle":{"#tail":"\n","#text":"An HPSG parser with CFG filtering. Natural Language Engineering ? Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Kentaro Torisawa"},{"#tail":"\n","#text":"Kenji Nishida"},{"#tail":"\n","#text":"Yusuke Miyao"},{"#tail":"\n","#text":"Junichi Tsujii"}]}},{"volume":{"#tail":"\n","#text":"10"},"#tail":"\n","date":{"#tail":"\n","#text":"1994"},"rawString":{"#tail":"\n","#text":"Gertjan van Noord. 1994. Head corner parsing for TAG. Computational Intelligence, 10(4):525?534."},"journal":{"#tail":"\n","#text":"Computational Intelligence,"},"#text":"\n","issue":{"#tail":"\n","#text":"4"},"marker":{"#tail":"\n","#text":"van Noord, 1994"},"title":{"#tail":"\n","#text":"Head corner parsing for TAG."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"Gertjan van Noord"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"1988"},"rawString":{"#tail":"\n","#text":"K. Vijay-Shanker and Aravind K. Joshi. 1988. Feature structures based Tree Adjoining Grammars. In Proc. of 12th COLING ?92, pages 714?719."},"#text":"\n","pages":{"#tail":"\n","#text":"714--719"},"marker":{"#tail":"\n","#text":"Vijay-Shanker, Joshi, 1988"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly","@endWordPosition":"230","@position":"1705","annotationId":"T28","@startWordPosition":"227","@citStr":"Vijay-Shanker and Joshi, 1988"},{"#tail":"\n","#text":"ode labeled with a terminal symbol called an anchor (marked with ). In an auxiliary tree, one leaf node is labeled with the same symbol as the root node and is specially marked as a foot node (marked with ). In an elementary tree, leaf nodes with the exception of anchors and the foot node are called substitution nodes (marked with #). Substitution replaces a substitution node with another initial tree (Figure 3). Adjunction grafts an auxiliary tree with the root node and foot node labeled x onto an internal node of another tree with the same symbol x (Figure 4). FBLTAG (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) is an extension of the LTAG formalism. In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the","@endWordPosition":"1280","@position":"7791","annotationId":"T29","@startWordPosition":"1277","@citStr":"Vijay-Shanker and Joshi, 1988"}]},"title":{"#tail":"\n","#text":"Feature structures based Tree Adjoining Grammars."},"booktitle":{"#tail":"\n","#text":"In Proc. of 12th COLING ?92,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"K Vijay-Shanker"},{"#tail":"\n","#text":"Aravind K Joshi"}]}},{"#tail":"\n","tech":{"#tail":"\n","#text":"Ph.D. thesis,"},"date":{"#tail":"\n","#text":"1987"},"institution":{"#tail":"\n","#text":"Department of Computer & Information Science, University of Pennsylvania."},"rawString":{"#tail":"\n","#text":"K. Vijay-Shanker. 1987. A Study of Tree Adjoining Grammars. Ph.D. thesis, Department of Computer & Information Science, University of Pennsylvania."},"#text":"\n","marker":{"#tail":"\n","#text":"Vijay-Shanker, 1987"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"lisms by a method of grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of","@endWordPosition":"226","@position":"1673","annotationId":"T30","@startWordPosition":"225","@citStr":"Vijay-Shanker, 1987"},{"#tail":"\n","#text":"s at least one leaf node labeled with a terminal symbol called an anchor (marked with ). In an auxiliary tree, one leaf node is labeled with the same symbol as the root node and is specially marked as a foot node (marked with ). In an elementary tree, leaf nodes with the exception of anchors and the foot node are called substitution nodes (marked with #). Substitution replaces a substitution node with another initial tree (Figure 3). Adjunction grafts an auxiliary tree with the root node and foot node labeled x onto an internal node of another tree with the same symbol x (Figure 4). FBLTAG (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) is an extension of the LTAG formalism. In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the ","@endWordPosition":"1276","@position":"7759","annotationId":"T31","@startWordPosition":"1275","@citStr":"Vijay-Shanker, 1987"}]},"title":{"#tail":"\n","#text":"A Study of Tree Adjoining Grammars."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"K Vijay-Shanker"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"1999"},"rawString":{"#tail":"\n","#text":"Fei Xia. 1999. Extracting Tree Adjoining Grammars from bracketed corpora. In Proc. of NLPRS ?99, pages 398?403."},"#text":"\n","pages":{"#tail":"\n","#text":"398--403"},"marker":{"#tail":"\n","#text":"Xia, 1999"},"title":{"#tail":"\n","#text":"Extracting Tree Adjoining Grammars from bracketed corpora."},"booktitle":{"#tail":"\n","#text":"In Proc. of NLPRS ?99,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"Fei Xia"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2001"},"note":{"#tail":"\n","#text":"Student Session. To appear."},"rawString":{"#tail":"\n","#text":"Naoki Yoshinaga and Yusuke Miyao. 2001. Grammar conversion from FB-LTAG to HPSG. In Proc. of ESSLLI 2001 Student Session. To appear."},"#text":"\n","marker":{"#tail":"\n","#text":"Yoshinaga, Miyao, 2001"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"ith an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al,","@endWordPosition":"266","@position":"1946","annotationId":"T32","@startWordPosition":"263","@citStr":"Yoshinaga and Miyao, 2001"},{"#tail":"\n","#text":" application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must have only one anchor. Sym: Arg: Sym : Leaf : Dir : right left , Foot?: + _ * think V S VP S NP V think: S VP S NP foot node anchor trunk * substitution node Sym : Leaf : Dir : F","@endWordPosition":"1757","@position":"10604","annotationId":"T33","@startWordPosition":"1754","@citStr":"Yoshinaga and Miyao, 2001"}]},"title":{"#tail":"\n","#text":"Grammar conversion from FB-LTAG to HPSG."},"booktitle":{"#tail":"\n","#text":"In Proc. of ESSLLI"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Naoki Yoshinaga"},{"#tail":"\n","#text":"Yusuke Miyao"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2001"},"note":{"#tail":"\n","#text":"To appear."},"rawString":{"#tail":"\n","#text":"Naoki Yoshinaga, Yusuke Miyao, Kentaro Torisawa, and Jun?ichi Tsujii. 2001. Efficient LTAG parsing using HPSG parsers. In Proc. of PACLING 2001. To appear."},"#text":"\n","marker":{"#tail":"\n","#text":"Yoshinaga, Miyao, Torisawa, Tsujii, 2001"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"ell discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parser with the obtained grammar achieved a significant speed-up against an existing LTAG parser (Yoshinaga et al, 2001). This result implies that parsing techniques for HPSG are also beneficial for LTAG parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Figure 1 depicts a brief sketch of the RenTAL system. The system consists of the following four modules: Tree converter, Type hierarchy extractor, Lexicon converter and Derivation translator. The tree converter module is a core module of the system, which is an implementation of the grammar conversion algorithm given in Section 3. The type hierarchy extractor module extracts the symbols of the node, feat","@endWordPosition":"554","@position":"3812","annotationId":"T34","@startWordPosition":"551","@citStr":"Yoshinaga et al, 2001"},{"#tail":"\n","#text":"LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 elementary trees because the LTAG parser cannot produce correct derivation trees with them. 5These lexical items are a subset of the original XTAG English grammar distribution. 6We eliminated 59 sentences because of a time-out of the parsers, and 61 sentences because the LTAG parser does not produce correct derivation trees because of bugs in its preprocessor. parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Another paper (Yoshinaga et al, 2001) describes the detailed analysis on the factor of the difference of parsing performance. 5 Conclusion We described the RenTAL system, a grammar converter from FB-LTAG to HPSG. The grammar conversion guarantees the strong equivalence, and hence we can obtain an HPSG-style grammar equivalent to existing LTAG grammars. Experimental result showed that the system enabled to share not only LTAG grammars, but also HPSG parsing techniques. This system will enable a variety of resource sharing such as the sharing of the programming/grammar-development environment (Makino et al, 1998; Sarkar and Wintner","@endWordPosition":"3848","@position":"21871","annotationId":"T35","@startWordPosition":"3845","@citStr":"Yoshinaga et al, 2001"}]},"title":{"#tail":"\n","#text":"Efficient LTAG parsing using HPSG parsers."},"booktitle":{"#tail":"\n","#text":"In Proc. of PACLING"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Naoki Yoshinaga"},{"#tail":"\n","#text":"Yusuke Miyao"},{"#tail":"\n","#text":"Kentaro Torisawa"},{"#tail":"\n","#text":"Junichi Tsujii"}]}}]}}]}}
