{"algorithms":{"#text":"\n","@version":"110505","algorithm":{"#tail":"\n","@name":"ParsCit","#text":"\n","@version":"110505","citationList":{"#tail":"\n","#text":"\n","citation":[{"#tail":"\n","date":{"#tail":"\n","#text":"2005"},"rawString":{"#tail":"\n","#text":"E. Charniak and M. Johnson. 2005. Coarse-to-fine nbest parsing and maxent discriminative reranking. In ACL, pages 173\u2013180."},"#text":"\n","pages":{"#tail":"\n","#text":"173--180"},"marker":{"#tail":"\n","#text":"Charniak, Johnson, 2005"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"el, the search errors from decoding with weaker hard constraints were 2.2% for NOT2, 2.1% for EXACTLY1, 1.7% for EXACTLY1 + NO2CYCLE, and 0.0% for PTREE. 9 Conclusions and Future Work Belief propagation improves non-projective dependency parsing with features that would make exact inference intractable. For projective parsing, it is significantly faster than exact dynamic programming, at the cost of small amounts of search error, We are interested in extending these ideas to phrase-structure and lattice parsing, and in trying other higher-order features, such as those used in parse reranking (Charniak and Johnson, 2005; Huang, 2008) and history-based parsing (Nivre and McDonald, 2008). We could also introduce new variables, e.g., nonterminal refinements (Matsuzaki et al., 2005), or secondary links Mid (not constrained by TREE/PTREE) that augment the parse with representations of control, binding, etc. (Sleator and Temperley, 1993; Buch-Kromann, 2006). Other parsing-like problems that could be attacked with BP appear in syntax-based machine translation. Decoding is very expensive with a synchronous grammar composed with an n-gram language model (Chiang, 2007)\u2014but our footnote 10 suggests that BP might incorp","@endWordPosition":"7185","@position":"42787","annotationId":"T1","@startWordPosition":"7182","@citStr":"Charniak and Johnson, 2005"}},"title":{"#tail":"\n","#text":"Coarse-to-fine nbest parsing and maxent discriminative reranking."},"booktitle":{"#tail":"\n","#text":"In ACL,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"E Charniak"},{"#tail":"\n","#text":"M Johnson"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2008"},"rawString":{"#tail":"\n","#text":"L. Huang. 2008. Forest reranking: Discriminative parsing with non-local features. In ACL, pages 586\u2013594."},"#text":"\n","pages":{"#tail":"\n","#text":"586--594"},"marker":{"#tail":"\n","#text":"Huang, 2008"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"approximation technique from machine learning, namely, loopy belief propagation (BP). In this paper, we show that BP can be used to train and decode complex parsing models. Our approach calls a simpler parser as a subroutine, so it still exploits the useful, well-studied combinatorial structure of the parsing problem.1 2 Overview and Related Work We wish to make a dependency parse\u2019s score depend on higher-order features, which consider ar*This work was supported by the Human Language Technology Center of Excellence. 1As do constraint relaxation (Tromble and Eisner, 2006) and forest reranking (Huang, 2008). In contrast, generic NP-hard solution techniques like Integer Linear Programming (Riedel and Clarke, 2006) know nothing about optimal substructure. bitrary interactions among two or more edges in the parse (and perhaps also other latent variables such as part-of-speech tags or edge labels). Such features can help accuracy\u2014as we show. Alas, they raise the polynomial runtime of projective parsing, and render non-projective parsing NP-hard. Hence we seek approximations. We will show how BP\u2019s \u201cmessage-passing\u201d discipline offers a principled way for higher-order features to incrementally adjust t","@endWordPosition":"294","@position":"1987","annotationId":"T2","@startWordPosition":"293","@citStr":"Huang, 2008"},{"#tail":"\n","#text":"ecoding with weaker hard constraints were 2.2% for NOT2, 2.1% for EXACTLY1, 1.7% for EXACTLY1 + NO2CYCLE, and 0.0% for PTREE. 9 Conclusions and Future Work Belief propagation improves non-projective dependency parsing with features that would make exact inference intractable. For projective parsing, it is significantly faster than exact dynamic programming, at the cost of small amounts of search error, We are interested in extending these ideas to phrase-structure and lattice parsing, and in trying other higher-order features, such as those used in parse reranking (Charniak and Johnson, 2005; Huang, 2008) and history-based parsing (Nivre and McDonald, 2008). We could also introduce new variables, e.g., nonterminal refinements (Matsuzaki et al., 2005), or secondary links Mid (not constrained by TREE/PTREE) that augment the parse with representations of control, binding, etc. (Sleator and Temperley, 1993; Buch-Kromann, 2006). Other parsing-like problems that could be attacked with BP appear in syntax-based machine translation. Decoding is very expensive with a synchronous grammar composed with an n-gram language model (Chiang, 2007)\u2014but our footnote 10 suggests that BP might incorporate a langua","@endWordPosition":"7187","@position":"42801","annotationId":"T3","@startWordPosition":"7186","@citStr":"Huang, 2008"}]},"title":{"#tail":"\n","#text":"Forest reranking: Discriminative parsing with non-local features."},"booktitle":{"#tail":"\n","#text":"In ACL,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":{"#tail":"\n","#text":"L Huang"}}},{"#tail":"\n","date":{"#tail":"\n","#text":"2005"},"rawString":{"#tail":"\n","#text":"T. Matsuzaki, Y. Miyao, and J. Tsujii. 2005. Probabilistic CFG with latent annotations. In ACL, pages 75\u201382."},"#text":"\n","pages":{"#tail":"\n","#text":"75--82"},"marker":{"#tail":"\n","#text":"Matsuzaki, Miyao, Tsujii, 2005"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"ns and Future Work Belief propagation improves non-projective dependency parsing with features that would make exact inference intractable. For projective parsing, it is significantly faster than exact dynamic programming, at the cost of small amounts of search error, We are interested in extending these ideas to phrase-structure and lattice parsing, and in trying other higher-order features, such as those used in parse reranking (Charniak and Johnson, 2005; Huang, 2008) and history-based parsing (Nivre and McDonald, 2008). We could also introduce new variables, e.g., nonterminal refinements (Matsuzaki et al., 2005), or secondary links Mid (not constrained by TREE/PTREE) that augment the parse with representations of control, binding, etc. (Sleator and Temperley, 1993; Buch-Kromann, 2006). Other parsing-like problems that could be attacked with BP appear in syntax-based machine translation. Decoding is very expensive with a synchronous grammar composed with an n-gram language model (Chiang, 2007)\u2014but our footnote 10 suggests that BP might incorporate a language model rapidly. String alignment with synchronous grammars is quite expensive even for simple synchronous formalisms like ITG (Wu, 1997)\u2014but Duchi","@endWordPosition":"7207","@position":"42949","annotationId":"T4","@startWordPosition":"7204","@citStr":"Matsuzaki et al., 2005"}},"title":{"#tail":"\n","#text":"Probabilistic CFG with latent annotations."},"booktitle":{"#tail":"\n","#text":"In ACL,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"T Matsuzaki"},{"#tail":"\n","#text":"Y Miyao"},{"#tail":"\n","#text":"J Tsujii"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"2008"},"rawString":{"#tail":"\n","#text":"J. Nivre and R. McDonald. 2008. Integrating graphbased and transition-based dependency parsers. In ACL."},"#text":"\n","marker":{"#tail":"\n","#text":"Nivre, McDonald, 2008"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"idering the interactions itself. BP\u2019s behavior in our setup can be understood intuitively as follows. Inasmuch as the first-order parser finds that edge e is probable, the higher-order features will kick in and discourage other edges e' to the extent that they prefer not to coexist with e.2 Thus, the next call to the first-order parser assigns lower probabilities to parses that contain these e'. (The method is approximate because a first-order parser must equally penalize all parses containing e', even those that do not in fact contain e.) This behavior is somewhat similar to parser stacking (Nivre and McDonald, 2008; Martins et al., 2008), in which a first-order parser derives some of its input features from the full 1-best output of another parser. In our method, a first-order parser derives such input features from its own previous full output (but probabilistic output rather than just 1- best). This circular process is iterated to convergence. Our method also permits the parse to interact cheaply with other variables. Thus first-order parsing, part-of-speech tagging, and other tasks on a common input could mutually influence one another. Our method and its numerical details emerge naturally as an inst","@endWordPosition":"513","@position":"3405","annotationId":"T5","@startWordPosition":"510","@citStr":"Nivre and McDonald, 2008"},{"#tail":"\n","#text":"e 2.2% for NOT2, 2.1% for EXACTLY1, 1.7% for EXACTLY1 + NO2CYCLE, and 0.0% for PTREE. 9 Conclusions and Future Work Belief propagation improves non-projective dependency parsing with features that would make exact inference intractable. For projective parsing, it is significantly faster than exact dynamic programming, at the cost of small amounts of search error, We are interested in extending these ideas to phrase-structure and lattice parsing, and in trying other higher-order features, such as those used in parse reranking (Charniak and Johnson, 2005; Huang, 2008) and history-based parsing (Nivre and McDonald, 2008). We could also introduce new variables, e.g., nonterminal refinements (Matsuzaki et al., 2005), or secondary links Mid (not constrained by TREE/PTREE) that augment the parse with representations of control, binding, etc. (Sleator and Temperley, 1993; Buch-Kromann, 2006). Other parsing-like problems that could be attacked with BP appear in syntax-based machine translation. Decoding is very expensive with a synchronous grammar composed with an n-gram language model (Chiang, 2007)\u2014but our footnote 10 suggests that BP might incorporate a language model rapidly. String alignment with synchronous g","@endWordPosition":"7194","@position":"42854","annotationId":"T6","@startWordPosition":"7191","@citStr":"Nivre and McDonald, 2008"}]},"title":{"#tail":"\n","#text":"Integrating graphbased and transition-based dependency parsers."},"booktitle":{"#tail":"\n","#text":"In ACL."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"J Nivre"},{"#tail":"\n","#text":"R McDonald"}]}}]}}}}
