n Research in natural language generation has generally separated the task into distinct text planning and linguistic components. The text planning component selects and organizes the information to be expressed in some internal representation and then sends it to the linguistic component, which converts the information from the internal form into grammatical sentences of some natural language. The names given to the components vary; they have been called &quot;strategic&quot; and &quot;tactical&quot; components (e.g., McKeown 1985; Thompson 1977; Danlos 1987)1, &quot;planning&quot; and &quot;realization&quot; (e.g., McDonald 1983; Hovy 1988a), or simply &quot;what to say&quot; versus &quot;how to say it&quot; (e.g., Danlos 1987; Reithinger 1990). The precise division of work between the components can also vary, as can the extent to which the text planner is responsible for selecting (as opposed to merely organizing) the information to be expressed. Much (if not most) work in generation, though, continues to rely on this modular approach for its basic design. For example, DIOGENES (Nirenburg et al. 1988), EPICURE (Dale 1989), SPOKESMAN (Meteer 1989), Sibun's work on local organization of text (Sibun 1991), and COMET (Fisher and McKeown 1990) all ar
 opposed to merely organizing) the information to be expressed. Much (if not most) work in generation, though, continues to rely on this modular approach for its basic design. For example, DIOGENES (Nirenburg et al. 1988), EPICURE (Dale 1989), SPOKESMAN (Meteer 1989), Sibun's work on local organization of text (Sibun 1991), and COMET (Fisher and McKeown 1990) all are organized this way. McDonald has even argued for extending the model to a large number of components (McDonald 1988), and several systems have indeed added an additional component between the planner and the linguistic component (Meteer 1994; Panaget 1994; Wanner 1994). Reiter describes a pipelined modular approach as a consensus architecture underlying most recent work in generation (Reiter 1994). As this large body of work makes clear, the modular approach has been very useful, simplifying the design of generators and making them more flexible. In fact, in at least one case the &quot;tactical&quot; component of a generator was successfully replaced with a radically different independently designed one (Rubinoff 1986). A modular design, 1 Danlos uses &quot;syntactic&quot; rather than &quot;tactical&quot;; see the note on page 122 of Danlos (1987). 108 Rubino
ng) the information to be expressed. Much (if not most) work in generation, though, continues to rely on this modular approach for its basic design. For example, DIOGENES (Nirenburg et al. 1988), EPICURE (Dale 1989), SPOKESMAN (Meteer 1989), Sibun's work on local organization of text (Sibun 1991), and COMET (Fisher and McKeown 1990) all are organized this way. McDonald has even argued for extending the model to a large number of components (McDonald 1988), and several systems have indeed added an additional component between the planner and the linguistic component (Meteer 1994; Panaget 1994; Wanner 1994). Reiter describes a pipelined modular approach as a consensus architecture underlying most recent work in generation (Reiter 1994). As this large body of work makes clear, the modular approach has been very useful, simplifying the design of generators and making them more flexible. In fact, in at least one case the &quot;tactical&quot; component of a generator was successfully replaced with a radically different independently designed one (Rubinoff 1986). A modular design, 1 Danlos uses &quot;syntactic&quot; rather than &quot;tactical&quot;; see the note on page 122 of Danlos (1987). 108 Rubinoff The IGEN Generator though
its basic design. For example, DIOGENES (Nirenburg et al. 1988), EPICURE (Dale 1989), SPOKESMAN (Meteer 1989), Sibun's work on local organization of text (Sibun 1991), and COMET (Fisher and McKeown 1990) all are organized this way. McDonald has even argued for extending the model to a large number of components (McDonald 1988), and several systems have indeed added an additional component between the planner and the linguistic component (Meteer 1994; Panaget 1994; Wanner 1994). Reiter describes a pipelined modular approach as a consensus architecture underlying most recent work in generation (Reiter 1994). As this large body of work makes clear, the modular approach has been very useful, simplifying the design of generators and making them more flexible. In fact, in at least one case the &quot;tactical&quot; component of a generator was successfully replaced with a radically different independently designed one (Rubinoff 1986). A modular design, 1 Danlos uses &quot;syntactic&quot; rather than &quot;tactical&quot;; see the note on page 122 of Danlos (1987). 108 Rubinoff The IGEN Generator though, presumes that the work done by each module can be done independently. Separating generation into text planning and linguistic com
sions are thus actually being made by the planner. 2.2 Facing the Dilemma We are now faced with a dilemma. On the one hand, the separation of planning and linguistic realization into distinct components seems natural and useful. On the other hand, it precludes making decisions involving interactions between text planning and linguistic issues. One possible response would be to abandon the separation; the generator could be a single component that handles all of the work. This approach has occasionally been taken, as in Kantrowitz and Bates (1992) and Danlos (1987) and, at least implicitly, in Paris and Scott (1994) and Delin et al. (1994); however, under this approach, all of the flexibility and simplicity of modular design is lost. The opposite approach is to simply ignore the limitations of a modular design and proceed as if there need be no interactions between the components. Whatever problems result will be handled as best they can, on a case-by-case basis. This approach is the one taken (implicitly or explicitly) in the majority of generators. In fact, Reiter has even argued in favor of this approach, claiming that the interactions are sufficiently minor to be ignored (or at least handled on an ad
 al. (1994); however, under this approach, all of the flexibility and simplicity of modular design is lost. The opposite approach is to simply ignore the limitations of a modular design and proceed as if there need be no interactions between the components. Whatever problems result will be handled as best they can, on a case-by-case basis. This approach is the one taken (implicitly or explicitly) in the majority of generators. In fact, Reiter has even argued in favor of this approach, claiming that the interactions are sufficiently minor to be ignored (or at least handled on an ad hoc basis) (Reiter 1994). While this certainly has appeal as a design methodology, it seems reckless to assume that problems will never appear. Certainly an approach to generation that does handle these interactions would be an improvement, as long as it didn't require abandoning modularity. There have in fact been attempts to develop modified modular designs that allow generators to handle interactions between the components. These include devices such as interleaving the components (McDonald 1983; Appelt 1983), backtracking on failure (Appelt 1985; Nogier 1989), allowing the linguistic component to interrogate the 
iming that the interactions are sufficiently minor to be ignored (or at least handled on an ad hoc basis) (Reiter 1994). While this certainly has appeal as a design methodology, it seems reckless to assume that problems will never appear. Certainly an approach to generation that does handle these interactions would be an improvement, as long as it didn't require abandoning modularity. There have in fact been attempts to develop modified modular designs that allow generators to handle interactions between the components. These include devices such as interleaving the components (McDonald 1983; Appelt 1983), backtracking on failure (Appelt 1985; Nogier 1989), allowing the linguistic component to interrogate the planner (Mann 1983; Sondheimer and Nebel 1986), and Hovy's notion of restrictive (i.e., bottom-up) planning (Hovy 1988a, 1988c). All of these approaches, though, require that potential interactions be determined either by the tactical component or by the system designer in advance. The text planning component still has no way to detect and respond to unanticipated interactions on its own initiative.5 4 Danlos still has a separate low-level &quot;syntactic&quot; component, but essentially all of the
his certainly has appeal as a design methodology, it seems reckless to assume that problems will never appear. Certainly an approach to generation that does handle these interactions would be an improvement, as long as it didn't require abandoning modularity. There have in fact been attempts to develop modified modular designs that allow generators to handle interactions between the components. These include devices such as interleaving the components (McDonald 1983; Appelt 1983), backtracking on failure (Appelt 1985; Nogier 1989), allowing the linguistic component to interrogate the planner (Mann 1983; Sondheimer and Nebel 1986), and Hovy's notion of restrictive (i.e., bottom-up) planning (Hovy 1988a, 1988c). All of these approaches, though, require that potential interactions be determined either by the tactical component or by the system designer in advance. The text planning component still has no way to detect and respond to unanticipated interactions on its own initiative.5 4 Danlos still has a separate low-level &quot;syntactic&quot; component, but essentially all of the generator's decisions are made by the strategic component. 5 In fact, adding additional components may make the problem even
er appear. Certainly an approach to generation that does handle these interactions would be an improvement, as long as it didn't require abandoning modularity. There have in fact been attempts to develop modified modular designs that allow generators to handle interactions between the components. These include devices such as interleaving the components (McDonald 1983; Appelt 1983), backtracking on failure (Appelt 1985; Nogier 1989), allowing the linguistic component to interrogate the planner (Mann 1983; Sondheimer and Nebel 1986), and Hovy's notion of restrictive (i.e., bottom-up) planning (Hovy 1988a, 1988c). All of these approaches, though, require that potential interactions be determined either by the tactical component or by the system designer in advance. The text planning component still has no way to detect and respond to unanticipated interactions on its own initiative.5 4 Danlos still has a separate low-level &quot;syntactic&quot; component, but essentially all of the generator's decisions are made by the strategic component. 5 In fact, adding additional components may make the problem even worse, as decisions may then be spread across three or more separate components. It might seem that
egment is an important part of the structure.' IGEN constructs its plans using a hierarchical planning algorithm (Nilsson 1980). The planner first checks all of its top-level plans to see which have effects that match the goal. Each matching plan's preconditions are checked; if they are currently (believed to be) true, the planner then attempts to find all instantiations of the plan's body. 1° The body of a plan can be an action or sequence of actions, a goal or sequence 9 Moore and Paris also note that &quot;a generation system must maintain the kinds of information outlined by Grosz and Sidner&quot; (Moore and Paris 1989, 203). Their planner uses plan structures similar to IGEN's, except that the plan operators they use are generally instantiations of rhetorical relations drawn from Rhetorical Structure Theory (Mann and Thompson 1987). In IGEN, the plans can involve any goals or actions that could be achieved via communication. Hovy has described another text planner that builds similar plans (Hovy 1988b). This system, however, starts with a list of information to be expressed and merely arranges it into a coherent pattern; it is thus not a planner in the sense used here (as Hovy makes clear). 10 Since text p
body of a plan can be an action or sequence of actions, a goal or sequence 9 Moore and Paris also note that &quot;a generation system must maintain the kinds of information outlined by Grosz and Sidner&quot; (Moore and Paris 1989, 203). Their planner uses plan structures similar to IGEN's, except that the plan operators they use are generally instantiations of rhetorical relations drawn from Rhetorical Structure Theory (Mann and Thompson 1987). In IGEN, the plans can involve any goals or actions that could be achieved via communication. Hovy has described another text planner that builds similar plans (Hovy 1988b). This system, however, starts with a list of information to be expressed and merely arranges it into a coherent pattern; it is thus not a planner in the sense used here (as Hovy makes clear). 10 Since text planning was not the primary focus of this work, IGEN is designed to simply assume that any false preconditions are unattainable. IGEN's planner divides the requirements of a plan into two parts: the preconditions, which are not planned for, and those in the plan body, which are. This has no 115 Computational Linguistics Volume 26, Number 2 1. Overall Goal: Know(Hearer,[weather informatio
re that allows IGEN to express #<NO—PRECIPITATION> three different ways in three different examples. The point here is not just that IGEN can produce different lexical realizations for a particular concept. If that were the only goal, we could dispense with the feedback mechanism and simply design some sort of discrimination network (or similar device) to test various features of the information being expressed. The planner could supply whatever information is needed to drive the network.' Something like this approach is in fact used in some systems (e.g., Elhadad and Robin 1992; PenMan 1989; Hovy 1988a). The problem with the discrimination network approach is that it can't handle the range of examples shown here without violating the modularity of the generator. The examples shown here have involved linguistic choices that depend on the plan structure, on other actions in the plan, and on preconditions of the plan. Furthermore, the plan dependencies can involve a nontrivial amount of reasoning (e.g., the example immediately above, which involves the connection between sunshine and enjoying 33 Of course, that still wouldn't allow for examples like the one in Section 4.2, where the planner m
