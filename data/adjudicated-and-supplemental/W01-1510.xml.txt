lisms by a method of grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of
grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly
rammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each forma
ith an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al,
matically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999;
r (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to 
nd Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, 
 (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing exper
 Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an
 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al, 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. LTAG Resources Grammar: Elementary tree templates Lexicon Type hierarchy extractor Tree converter Lexicon converter RenTAL System HPSG Resources Grammar: Lexical entry templates Lexicon LTAG parsers HPSG parsers Derivation trees Parse trees Derivation translator LTAG-based application HPSG-based application Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parse
 Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al, 2000; Makino et al, 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parser with the obtained grammar achieved a significant speed-up against an existing LTAG parser (Yoshinaga et al, 2001). This result implies that parsing techniques for HPSG are also beneficial for LTAG parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Figure 1 depicts a brief sketch of the RenTAL system. The system consists of the following four modules: Tree converter, Type hierarchy extractor, Lexicon converter and Derivation translator. The
ell discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of ?parsing techniques?, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parser with the obtained grammar achieved a significant speed-up against an existing LTAG parser (Yoshinaga et al, 2001). This result implies that parsing techniques for HPSG are also beneficial for LTAG parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Figure 1 depicts a brief sketch of the RenTAL system. The system consists of the following four modules: Tree converter, Type hierarchy extractor, Lexicon converter and Derivation translator. The tree converter module is a core module of the system, which is an implementation of the grammar conversion algorithm given in Section 3. The type hierarchy extractor module extracts the symbols of the node, feat
on, and construct the type hierarchy from them. The lexicon converter module converts LTAG elementary tree templates into HPSG lexical entries. The derivation translator module takes HPSG parse S NP VP V run VP VP V can * NP N We ?1 ?2 ?1 anchor foot node * substitution node Initial tree Auxiliary tree Figure 2: Elementary trees trees, and map them to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al also translated LTAG into HPSG (Tateisi et al, 1998). However, their method depended on translator?s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al, 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions 
es trees, and map them to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al also translated LTAG into HPSG (Tateisi et al, 1998). However, their method depended on translator?s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al, 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the Re
em to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al also translated LTAG into HPSG (Tateisi et al, 1998). However, their method depended on translator?s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al, 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the RenTAL system uses. Section
rictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the RenTAL system uses. Section 4 presents the evaluation of the RenTAL system through experiments with the XTAG English grammar. Section 5 concludes this study and addresses future works. 2 Background 2.1 Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG) LTAG (Schabes et al, 1988) is a grammar formalism that provides syntactic analyses for a sentence by composing elementary trees with two operaArg : we can run ID grammar rule unify Sym : NP Arg : Sym : VP Arg : VP Sym : VP Arg : NP Arg : Sym : Arg : 2 3 2 unify 3 unify ID grammar rule we can run Sym : NP Arg : Sym : VP Arg : VP Sym : VP Arg : NP Arg : NP Sym : Arg : Arg : 1 1 | 2 Arg : 2 unify we can run Sym : NP Arg : Sym : VP Arg : VP Sym : VP Arg : NP Arg : NP Arg : Figure 6: Parsing with an HPSG grammar S NP VP V run NP N We substitution ?1 ?2 S NP VP V run N We Figure 3: Substitution VP VP V can * adjunction ?1 S 
s at least one leaf node labeled with a terminal symbol called an anchor (marked with ). In an auxiliary tree, one leaf node is labeled with the same symbol as the root node and is specially marked as a foot node (marked with ). In an elementary tree, leaf nodes with the exception of anchors and the foot node are called substitution nodes (marked with #). Substitution replaces a substitution node with another initial tree (Figure 3). Adjunction grafts an auxiliary tree with the root node and foot node labeled x onto an internal node of another tree with the same symbol x (Figure 4). FBLTAG (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) is an extension of the LTAG formalism. In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the 
ode labeled with a terminal symbol called an anchor (marked with ). In an auxiliary tree, one leaf node is labeled with the same symbol as the root node and is specially marked as a foot node (marked with ). In an elementary tree, leaf nodes with the exception of anchors and the foot node are called substitution nodes (marked with #). Substitution replaces a substitution node with another initial tree (Figure 3). Adjunction grafts an auxiliary tree with the root node and foot node labeled x onto an internal node of another tree with the same symbol x (Figure 4). FBLTAG (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) is an extension of the LTAG formalism. In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the
ary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al, 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeille? and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the 
ure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not derived tree ?2 ?1?1 derivation tree S NP VP VP V can N We V run Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al, 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeille? and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the grammatical category. An ID grammar 
veloped in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al, 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeille? and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the grammatical category. An ID grammar rule represents a relation between a mother and its daughters, and is independent of lexical characteristics. Figure 6 illustrates an example of bottom-up parsing with an HPSG grammar. First, lexical entries for ?can? and ?run? are unified respectively with the daughter feature structures of Canonical elementary trees Non-canonical elementary trees think S NP VP V S * it S NP VP N V VP V ? is Non-anchored subtree S NP VP V PP P NP for look P
n for Condition 1 b) Exception for Condition 2 Figure 7: A canonical elementary tree and exceptions an ID grammar rule. The feature structure of the mother node is determined as a result of these unifications. The center of Figure 6 shows a rule application to ?can run? and ?we?. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulat
e of the mother node is determined as a result of these unifications. The center of Figure 6 shows a rule application to ?can run? and ?we?. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a ca
igure 6 shows a rule application to ?can run? and ?we?. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must 
 efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must have only one anchor. Sym: Arg: Sym : Leaf : Dir : right left , Foot?: + _ * think V S
 application contexts (Flickinger et al, 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al, 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al, 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al, 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must have only one anchor. Sym: Arg: Sym : Leaf : Dir : right left , Foot?: + _ * think V S VP S NP V think: S VP S NP foot node anchor trunk * substitution node Sym : Leaf : Dir : F
f : Dir : right left , Foot?: + _ * think V S VP S NP V think: S VP S NP foot node anchor trunk * substitution node Sym : Leaf : Dir : Foot?: Figure 8: A conversion from a canonical elementary tree into an HPSG lexical entry mother  Sym : 1 Arg : 2       h Sym : 3 Arg : h i i substitution node X X X X X 2 4 Arg : * 2 4 Sym : 1 Leaf : 3 Dir : left Foot? :  3 5 j 2 + 3 5 trunk node Figure 9: Left substitution rule Condition 2 All branchings in a tree must contain trunk nodes. Trunk nodes are nodes on a trunk, which is a path from an anchor to the root node (the thick lines in Figure 7) (Kasper et al, 1995). Condition 1 guarantees that a canonical elementary tree has only one trunk, and Condition 2 guarantees that each branching consists of a trunk node, a leaf node, and their mother (also a trunk node). The righthand side of Figure 7 shows elementary trees violating the conditions. Canonical elementary trees can be directly converted to HPSG lexical entries by regarding each leaf node as a subcategorization element of the anchor, and by encoding them into a list. Figure 8 shows an example of the conversion. By following the trunk from the anchor ?think? to the mother  Sym : 1 Arg : 2  3   
n 1, C: elementary trees violating only Condition 2, D: elementary trees violating both conditions Grammar A B C D Total LTAG 326 764 54 50 1,194 HPSG 326 1,992 1,083 2,474 5,875 nodes from the substitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/
75 nodes from the substitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consist
stitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consists of 1,194 4 elementary
al elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al, 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al, 1999; Torisawa et al, 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consists of 1,194 4 elementary tree templates and around 45,000 lexical items5. We successfully converted all the
cessfully converted all the elementary tree templates in the XTAG English grammar to HPSG lexical entry templates. Table 1 shows the classifications of elementary tree templates of the XTAG English grammar, according to the conditions we introduced in Section 3, and also shows the number of corresponding HPSG lexical entry templates. Conversion took about 25 minutes CPU time on a 700 Mhz Pentium III Xeon with four gigabytes main memory. The original and the obtained grammar generated exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al, 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al, 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) 
ced in Section 3, and also shows the number of corresponding HPSG lexical entry templates. Conversion took about 25 minutes CPU time on a 700 Mhz Pentium III Xeon with four gigabytes main memory. The original and the obtained grammar generated exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al, 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al, 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) and then executes feature unification (phase 2). Table 2 clearly shows that the HPSG parser is significantly faster than the LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 element
d exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al, 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al, 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) and then executes feature unification (phase 2). Table 2 clearly shows that the HPSG parser is significantly faster than the LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 elementary trees because the LTAG parser cannot produce correct derivation trees with them. 5These lexical items are a subset of the original XTAG English grammar distribution. 6We eliminated 59 sentences because of a time-out of the parsers, and 61 se
LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 elementary trees because the LTAG parser cannot produce correct derivation trees with them. 5These lexical items are a subset of the original XTAG English grammar distribution. 6We eliminated 59 sentences because of a time-out of the parsers, and 61 sentences because the LTAG parser does not produce correct derivation trees because of bugs in its preprocessor. parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Another paper (Yoshinaga et al, 2001) describes the detailed analysis on the factor of the difference of parsing performance. 5 Conclusion We described the RenTAL system, a grammar converter from FB-LTAG to HPSG. The grammar conversion guarantees the strong equivalence, and hence we can obtain an HPSG-style grammar equivalent to existing LTAG grammars. Experimental result showed that the system enabled to share not only LTAG grammars, but also HPSG parsing techniques. This system will enable a variety of resource sharing such as the sharing of the programming/grammar-development environment (Makino et al, 1998; Sarkar and Wintner
