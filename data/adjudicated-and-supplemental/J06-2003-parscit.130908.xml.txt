al is to learn a set of words and expressions from CTRW—that is, extraction patterns—that characterizes descriptions of the class. Then, during the extraction phase, for each sentence (or fragment of a sentence) in CTRW the program will decide which leaf class is expressed, with what strength, and what frequency. We use a decision-list algorithm to learn sets of words and extraction patterns for the classes DENOTATIONAL DISTINCTIONS and ATTITUDE-STYLE DISTINCTIONS. These are split further for each leaf class, as explained in Section 2.3. The algorithm we implemented is inspired by the work of Yarowsky (1995) on word sense disambiguation. He classified the senses of a word on the basis of other words that the given word co-occurs with. Collins and Singer (1999) classified proper names 1 We are grateful to HarperCollins Publishers, Inc. for permission to use CTRW in this project. 228 Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differences Figure 4 Example of distinctions extracted from CTRW. as PERSON, ORGANIZATION, or LOCATION using contextual rules (that rely on other words appearing in the context of the proper names) and spelling rules (that rely on words in the proper names). Sta
he extraction phase, for each sentence (or fragment of a sentence) in CTRW the program will decide which leaf class is expressed, with what strength, and what frequency. We use a decision-list algorithm to learn sets of words and extraction patterns for the classes DENOTATIONAL DISTINCTIONS and ATTITUDE-STYLE DISTINCTIONS. These are split further for each leaf class, as explained in Section 2.3. The algorithm we implemented is inspired by the work of Yarowsky (1995) on word sense disambiguation. He classified the senses of a word on the basis of other words that the given word co-occurs with. Collins and Singer (1999) classified proper names 1 We are grateful to HarperCollins Publishers, Inc. for permission to use CTRW in this project. 228 Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differences Figure 4 Example of distinctions extracted from CTRW. as PERSON, ORGANIZATION, or LOCATION using contextual rules (that rely on other words appearing in the context of the proper names) and spelling rules (that rely on words in the proper names). Starting with a few spelling rules (using some proper-name features) in the decision list, their algorithm learns new contextual rules; using these rules, it 
cision list that allows us to compute the confidence with which new patterns Figure 5 The architecture of the extraction module. 229 Computational Linguistics Volume 32, Number 2 Figure 6 The decision-list learning algorithm. are significant for the class. The confidence h(x) for a word x is computed with the formula: count(x, E') + α h(x) = (1) count(x, E) + kα where E' is the set of patterns selected for the class, and E is the set of all input data. So, we count how many times x is in the patterns selected for the class versus the total number of occurrences in the training data. Following Collins and Singer (1999), k = 2, because there are two partitions (relevant and irrelevant for the class). α = 0.1 is a smoothing parameter. In order to obtain input data, we replace all the near-synonyms in the text of the dictionary with the term near syn; then we chunk the text with Abney’s chunker (Abney 1996). The training set E is composed of all the verb phrases, noun phrases, adjectival phrases, and adverbial phrases (denoted vx, nx, ax, rx, respectively) that occur more 230 Inkpen and Hirst A Lexical Knowledge Base of Near-Synonym Differences than t times in the text of the dictionary (where t = 3 in our exp
