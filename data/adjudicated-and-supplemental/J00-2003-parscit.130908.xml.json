{"algorithms":{"#text":"\n","@version":"110505","algorithm":{"#tail":"\n","@name":"ParsCit","#text":"\n","@version":"110505","citationList":{"#tail":"\n","#text":"\n","citation":[{"#tail":"\n","date":{"#tail":"\n","#text":"1998"},"rawString":{"#tail":"\n","#text":"Brill, Eric and Jun Wu. 1998. Classifier combination for improved lexical disambiguation. In COLING-ACL '98: 36th Annual Meeting of the Association for Computational Linguistics and the 17th International Conference on Computational Linguistics, pages 191-195, Montreal, Canada."},"#text":"\n","pages":{"#tail":"\n","#text":"191--195"},"marker":{"#tail":"\n","#text":"Brill, Wu, 1998"},"location":{"#tail":"\n","#text":"Montreal, Canada."},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":", good) data with inaccurate or biased data, especially if the uncertainties or variances of the data are unknown&quot; (p. 8). Methods of information fusion include &quot;voting methods, Bayesian inference, Dempster-Shafer 's method, generalized evidence processing theory, and various ad hoc techniques&quot; (Hall 1992, 135). Clearly, the above characterization is very wide ranging. Consequently, fusion has been applied to a wide variety of pattern recognition and decision theoretic problems\u2014 using a plethora of theories, techniques, and tools\u2014including some applications in computational linguistics (e.g., Brill and Wu 1998; van Halteren, Zavrel, and Daelemans 1998) and speech technology (e.g., Bowles and Damper 1989; Romary and Pierre11989). According to Abbott (1999, 290), &quot;While the reasons [that] combining models works so well are not rigorously understood, there is ample evidence that improvements over single models are typical.... A strong case can be made for combining models across algorithm families as a means of providing uncorrelated output estimates.&quot; Our purpose in this paper is to study and exploit such fusion by model (or strategy) combination as a way of achieving performance gains in PbA. 6. Mul","@endWordPosition":"5104","@position":"32843","annotationId":"T1","@startWordPosition":"5101","@citStr":"Brill and Wu 1998"}},"title":{"#tail":"\n","#text":"Classifier combination for improved lexical disambiguation."},"booktitle":{"#tail":"\n","#text":"In COLING-ACL '98: 36th Annual Meeting of the Association for Computational Linguistics and the 17th International Conference on Computational Linguistics,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Eric Brill"},{"#tail":"\n","#text":"Jun Wu"}]}},{"date":{"#tail":"\n","#text":"1985"},"contexts":{"#tail":"\n","#text":"\n","context":{"#tail":"\n","#text":"t (yet) reached the level of rule sets developed by humans&quot; (p. 520). Dutoit (1997) takes this further, stating &quot;such training-based strategies are often assumed to exhibit much more intelligence than they do in practice, as revealed by their poor transcription scores&quot; (p. 115, note 14). Pronunciation by analogy (PbA) is a data-driven technique for the automatic phonemization of text, originally proposed as a model of reading, e.g., by Glushko (1979) and Kay and Marcel (1981). It was first proposed for ITS applications over a decade ago by Dedina and Nusbaum (1986, 1991). See also the work of Byrd and Chodorow (1985), which considers computer-based pronunciation by analogy but does not mention the possible application to text-to-speech synthesis. As detailed by Damper (1995) and Damper and Eastmond (1997), PbA shares many similarities with the artificial intelligence paradigms variously called case-based, memory-based, or instance-based reasoning as applied to letter-to-phoneme conversion (Stanfill and Waltz 1986; Lehnert 1987; Stanfill 1987, 1988; Golding 1991; Golding and Rosenbloom 1991; van den Bosch and Daelemans 1993). PbA exploits the phonological knowledge implicitly contained in a dictionary of w","@endWordPosition":"2113","@position":"13692","annotationId":"T2","@startWordPosition":"2110","@citStr":"Byrd and Chodorow (1985)"}},"title":{"#tail":"\n","#text":"Using an on-line dictionary to find rhyming words and pronunciations for unknown words."},"#tail":"\n","institution":{"#tail":"\n","#text":"Computational Linguistics."},"rawString":{"#tail":"\n","#text":"Byrd, Roy J. and Martin S. Chodorow. 1985. Using an on-line dictionary to find rhyming words and pronunciations for unknown words. In Proceedings of the 23rd Meeting, pages 277-283, Chicago, IL. Association for Computational Linguistics."},"#text":"\n","pages":{"#tail":"\n","#text":"277--283"},"marker":{"#tail":"\n","#text":"Byrd, Chodorow, 1985"},"publisher":{"#tail":"\n","#text":"Association for"},"location":{"#tail":"\n","#text":"Chicago, IL."},"booktitle":{"#tail":"\n","#text":"In Proceedings of the 23rd Meeting,"},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Roy J Byrd"},{"#tail":"\n","#text":"Martin S Chodorow"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1997"},"rawString":{"#tail":"\n","#text":"Divay, Michel and Anthony J. Vitale. 1997. Algorithms for grapheme-phoneme translation for English and French: Applications for database searches and speech synthesis. Computational Linguistics, 23(4):495-523."},"journal":{"#tail":"\n","#text":"Computational Linguistics,"},"#text":"\n","pages":{"#tail":"\n","#text":"23--4"},"marker":{"#tail":"\n","#text":"Divay, Vitale, 1997"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"ontext C receives the pronunciation (i.e., phoneme substring) D. Such rules can also be straightforwardly cast in the IF. . . THEN form commonly featured in high-level programming languages and employed in expert, knowledge-based systems technology. They also constitute a formal model of universal computation (Post 1943). Conventionally, these rules are specified by an expert linguist, conversant with the sound and spelling systems of the language of concern. Typical letter-to-sound rule sets are those described by Ainsworth (1973), McIlroy (1973), Elovitz et al. (1976), Hurmicutt (1976), and Divay and Vitale (1997). Because of the complexities of English spelling-to-sound correspondence detailed in the previous section, more than one rule generally applies at each stage of transcription. The potential conflicts that arise are resolved by maintaining the rules in a set of sublists, grouped by (initial) letter and with each sublist ordered by specificity. Typically, the most specific rule is at the top and most general at the bottom. In the Elovitz et al. rules, for instance, transcription is a one-pass, left-to-right process. For the particular target letter (i.e., the initial letter of the substring cur","@endWordPosition":"1429","@position":"9356","annotationId":"T3","@startWordPosition":"1426","@citStr":"Divay and Vitale (1997)"},{"#tail":"\n","#text":"ge processing that the representation of language should be done within the rule-based paradigm alone. For historical reasons, this traditional position is largely the result of the influence of Chomsky and his efforts to define language in terms of formal mathematics.... The contrasting view, taken here, is that language is not something that can be described in a neat and tidy way. This is also the perspective adopted here. It is also conceivable that data-driven techniques can actually outperform traditional rules. However, this possibility is not usually given much credence. For instance, Divay and Vitale (1997) recently wrote: &quot;To our knowledge, learning algorithms, although promising, have not (yet) reached the level of rule sets developed by humans&quot; (p. 520). Dutoit (1997) takes this further, stating &quot;such training-based strategies are often assumed to exhibit much more intelligence than they do in practice, as revealed by their poor transcription scores&quot; (p. 115, note 14). Pronunciation by analogy (PbA) is a data-driven technique for the automatic phonemization of text, originally proposed as a model of reading, e.g., by Glushko (1979) and Kay and Marcel (1981). It was first proposed for ITS appl","@endWordPosition":"1998","@position":"12984","annotationId":"T4","@startWordPosition":"1995","@citStr":"Divay and Vitale (1997)"}]},"title":{"#tail":"\n","#text":"Algorithms for grapheme-phoneme translation for English and French: Applications for database searches and speech synthesis."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Michel Divay"},{"#tail":"\n","#text":"Anthony J Vitale"}]}},{"#tail":"\n","date":{"#tail":"\n","#text":"1997"},"rawString":{"#tail":"\n","#text":"Divay, Michel and Anthony J. Vitale. 1997. Algorithms for grapheme-phoneme translation for English and French: Applications for database searches and speech synthesis. Computational Linguistics, 23(4):495-523."},"journal":{"#tail":"\n","#text":"Computational Linguistics,"},"#text":"\n","pages":{"#tail":"\n","#text":"23--4"},"marker":{"#tail":"\n","#text":"Divay, Vitale, 1997"},"contexts":{"#tail":"\n","#text":"\n","context":[{"#tail":"\n","#text":"ontext C receives the pronunciation (i.e., phoneme substring) D. Such rules can also be straightforwardly cast in the IF. . . THEN form commonly featured in high-level programming languages and employed in expert, knowledge-based systems technology. They also constitute a formal model of universal computation (Post 1943). Conventionally, these rules are specified by an expert linguist, conversant with the sound and spelling systems of the language of concern. Typical letter-to-sound rule sets are those described by Ainsworth (1973), McIlroy (1973), Elovitz et al. (1976), Hurmicutt (1976), and Divay and Vitale (1997). Because of the complexities of English spelling-to-sound correspondence detailed in the previous section, more than one rule generally applies at each stage of transcription. The potential conflicts that arise are resolved by maintaining the rules in a set of sublists, grouped by (initial) letter and with each sublist ordered by specificity. Typically, the most specific rule is at the top and most general at the bottom. In the Elovitz et al. rules, for instance, transcription is a one-pass, left-to-right process. For the particular target letter (i.e., the initial letter of the substring cur","@endWordPosition":"1429","@position":"9356","annotationId":"T5","@startWordPosition":"1426","@citStr":"Divay and Vitale (1997)"},{"#tail":"\n","#text":"ge processing that the representation of language should be done within the rule-based paradigm alone. For historical reasons, this traditional position is largely the result of the influence of Chomsky and his efforts to define language in terms of formal mathematics.... The contrasting view, taken here, is that language is not something that can be described in a neat and tidy way. This is also the perspective adopted here. It is also conceivable that data-driven techniques can actually outperform traditional rules. However, this possibility is not usually given much credence. For instance, Divay and Vitale (1997) recently wrote: &quot;To our knowledge, learning algorithms, although promising, have not (yet) reached the level of rule sets developed by humans&quot; (p. 520). Dutoit (1997) takes this further, stating &quot;such training-based strategies are often assumed to exhibit much more intelligence than they do in practice, as revealed by their poor transcription scores&quot; (p. 115, note 14). Pronunciation by analogy (PbA) is a data-driven technique for the automatic phonemization of text, originally proposed as a model of reading, e.g., by Glushko (1979) and Kay and Marcel (1981). It was first proposed for ITS appl","@endWordPosition":"1998","@position":"12984","annotationId":"T6","@startWordPosition":"1995","@citStr":"Divay and Vitale (1997)"}]},"title":{"#tail":"\n","#text":"Algorithms for grapheme-phoneme translation for English and French: Applications for database searches and speech synthesis."},"@valid":"true","authors":{"#tail":"\n","#text":"\n","author":[{"#tail":"\n","#text":"Michel Divay"},{"#tail":"\n","#text":"Anthony J Vitale"}]}}]}}}}
