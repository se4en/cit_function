n received: 18 June 2009; revised submission received: 4 October 2010; accepted for publication: 1 December 2010. ? 2011 Association for Computational Linguistics Computational Linguistics Volume 37, Number 3 1. Introduction A common goal of many spoken dialog systems (SDSs) is to offer efficient and natural access to applications and services, such as e-mail, calendars, travel booking, navigation systems, and product recommendation, in situations where the user?s hands and/or eyes are busy with another task, for example driving a car (Pon-Barry, Weng, and Varges 2006) or operating equipment (Hieronymus and Dowding 2007). The naturalness and usability of a spoken dialog interface depends not only on its ability to recognize and interpret user utterances correctly, but also on its ability to present information in ways that users can understand and that help them to achieve their goals. One class of SDSs that has received considerable attention from both academic research and industry are information-seeking SDSs, which are designed to enable users to browse the space of available options (e.g., flights, hotels, movies) and choose a suitable option from a potentially large set of choices. Dialogs with such sys
ch the user?s constraints. An example is given in Figure 1. In some systems, these activities take place in strictly sequential phases: All of the information necessary to form a database query is gathered, and then the returned options are presented, one at a time or in small groups. In other systems, the activities are interleaved, with users refining their constraints after being presented with some options, or a summary of the option space. In either case, when the number of options to be presented is large, this process can be laborious, leading to reduced user satisfaction. Moreover, as Walker et al (2004) observe, having to access the set of available options sequentially makes it difficult for the user to remember the various aspects of multiple options and to compare them mentally. Although much research has been conducted on the information gathering phase of spoken dialog systems, relatively little attention has been devoted to information presentation. An analysis of the Communicator corpus consisting of approximately 2,000 dialogs with nine different spoken dialog systems found that information presentation is the main contributor to dialog duration1 (Moore 2006); see Table 1. Moreover, 
on. Moreover, as Walker et al (2004) observe, having to access the set of available options sequentially makes it difficult for the user to remember the various aspects of multiple options and to compare them mentally. Although much research has been conducted on the information gathering phase of spoken dialog systems, relatively little attention has been devoted to information presentation. An analysis of the Communicator corpus consisting of approximately 2,000 dialogs with nine different spoken dialog systems found that information presentation is the main contributor to dialog duration1 (Moore 2006); see Table 1. Moreover, the DARPA Communicator evaluation showed that task duration is negatively correlated with user satisfaction (r = ?0.31, p < 0.001, see Walker, Passonneau, and Boland [2001]). Thus, there is reason to believe that improvements in information presentation will lead to improvements in spoken dialog systems. Recently, two approaches to information presentation that present an alternative to sequential information presentation have been proposed. In the user-model (UM) based approach, the system identifies a small number of options that best match the user?s preferences (Mo
6); see Table 1. Moreover, the DARPA Communicator evaluation showed that task duration is negatively correlated with user satisfaction (r = ?0.31, p < 0.001, see Walker, Passonneau, and Boland [2001]). Thus, there is reason to believe that improvements in information presentation will lead to improvements in spoken dialog systems. Recently, two approaches to information presentation that present an alternative to sequential information presentation have been proposed. In the user-model (UM) based approach, the system identifies a small number of options that best match the user?s preferences (Moore et al 2004; Walker et al 2004). In the summarize and refine (SR) approach, the system structures the large number of options into a small number of clusters that share attributes. The system then summarizes the clusters based on their attributes, thus prompting the user to provide additional constraints (Polifroni, Chung, and Seneff 2003; Chung 2004). In this article, we propose an approach to information presentation which shortens dialog duration by combining the benefits of these two approaches (UMSR). Our 1 This analysis was performed on the Communicator corpus which has been annotated extensively, 
approaches to information presentation that present an alternative to sequential information presentation have been proposed. In the user-model (UM) based approach, the system identifies a small number of options that best match the user?s preferences (Moore et al 2004; Walker et al 2004). In the summarize and refine (SR) approach, the system structures the large number of options into a small number of clusters that share attributes. The system then summarizes the clusters based on their attributes, thus prompting the user to provide additional constraints (Polifroni, Chung, and Seneff 2003; Chung 2004). In this article, we propose an approach to information presentation which shortens dialog duration by combining the benefits of these two approaches (UMSR). Our 1 This analysis was performed on the Communicator corpus which has been annotated extensively, including annotations for speech act types and timing information (Walker and Passonneau 2001; Georgila et al 2009). 490 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs Figure 1 Typical information presentation phase of a communicator dialog. Table 1 System contributions: Requesting and presenting information 
e system structures the large number of options into a small number of clusters that share attributes. The system then summarizes the clusters based on their attributes, thus prompting the user to provide additional constraints (Polifroni, Chung, and Seneff 2003; Chung 2004). In this article, we propose an approach to information presentation which shortens dialog duration by combining the benefits of these two approaches (UMSR). Our 1 This analysis was performed on the Communicator corpus which has been annotated extensively, including annotations for speech act types and timing information (Walker and Passonneau 2001; Georgila et al 2009). 490 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs Figure 1 Typical information presentation phase of a communicator dialog. Table 1 System contributions: Requesting and presenting information in Communicator systems. System Requesting info Presenting info Other Utterances 43% 25% 32% Time 31% 54% 15% Words 28% 50% 22% approach integrates user modeling with automated clustering such that information is structured in a way that enables users to more effectively and efficiently browse the option space. The system provides detail only about 
e number of options into a small number of clusters that share attributes. The system then summarizes the clusters based on their attributes, thus prompting the user to provide additional constraints (Polifroni, Chung, and Seneff 2003; Chung 2004). In this article, we propose an approach to information presentation which shortens dialog duration by combining the benefits of these two approaches (UMSR). Our 1 This analysis was performed on the Communicator corpus which has been annotated extensively, including annotations for speech act types and timing information (Walker and Passonneau 2001; Georgila et al 2009). 490 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs Figure 1 Typical information presentation phase of a communicator dialog. Table 1 System contributions: Requesting and presenting information in Communicator systems. System Requesting info Presenting info Other Utterances 43% 25% 32% Time 31% 54% 15% Words 28% 50% 22% approach integrates user modeling with automated clustering such that information is structured in a way that enables users to more effectively and efficiently browse the option space. The system provides detail only about those options that are
se refinement. The effectiveness of the tree structure, which directs the dialog flow, is optimized by taking the user?s preferences into account. In order to give the user a good overview of the option space, trade-offs between alternative options are presented explicitly. In addition, despite selecting only the relevant options, the algorithm also briefly accounts for the remaining (irrelevant) options. We hypothesize that this approach will enable users to make more informed choices. Our approach to the problem has been implemented within FLIGHTS, a spoken dialog system for flight booking (Moore et al 2004; White, Clark, and Moore 2010). Our results show that in addition to improving dialog efficiency (in terms of number of dialog turns) and effectiveness (in terms of successful task completion), our approach increases user satisfaction. We hypothesize that user modeling in combination with content selection and structuring as implemented in our UMSR strategy can improve the information presentation phase of spoken dialog systems in the following ways: 1. UMSR leads to increased efficiency of information presentation. 2. UMSR makes information presentation more effective. 3. UMSR enables the sy
t on the relation of this system to other systems from the literature in section 8, and discuss implications of our findings and future directions in Section 9. 2. Background on User Modeling and Content Structuring for Information Presentation 2.1 Tailoring to a User Model (UM) Previous work in natural language generation showed how a multi-attribute decisiontheoretic model of user preferences can be used in a recommender system to determine which options to mention to a particular user, as well as the attributes that the user will find most relevant for choosing among the available options (Carenini and Moore 2001). In the MATCH system, Walker et al (2004) applied this approach to information presentation in SDSs, and extended it to generate summaries and comparisons among options. Evaluation of the MATCH system showed that tailoring recommendations and comparisons to the user increases argument effectiveness and improves user satisfaction (Walker et al 2004). MATCH included content planning algorithms to determine what options and attributes to mention, but used a simple template-based approach to realization. For the design of the FLIGHTS2 system, Moore et al (2004) focused on organizing and expressin
ms from the literature in section 8, and discuss implications of our findings and future directions in Section 9. 2. Background on User Modeling and Content Structuring for Information Presentation 2.1 Tailoring to a User Model (UM) Previous work in natural language generation showed how a multi-attribute decisiontheoretic model of user preferences can be used in a recommender system to determine which options to mention to a particular user, as well as the attributes that the user will find most relevant for choosing among the available options (Carenini and Moore 2001). In the MATCH system, Walker et al (2004) applied this approach to information presentation in SDSs, and extended it to generate summaries and comparisons among options. Evaluation of the MATCH system showed that tailoring recommendations and comparisons to the user increases argument effectiveness and improves user satisfaction (Walker et al 2004). MATCH included content planning algorithms to determine what options and attributes to mention, but used a simple template-based approach to realization. For the design of the FLIGHTS2 system, Moore et al (2004) focused on organizing and expressing the descriptions of the selected options
 among the available options (Carenini and Moore 2001). In the MATCH system, Walker et al (2004) applied this approach to information presentation in SDSs, and extended it to generate summaries and comparisons among options. Evaluation of the MATCH system showed that tailoring recommendations and comparisons to the user increases argument effectiveness and improves user satisfaction (Walker et al 2004). MATCH included content planning algorithms to determine what options and attributes to mention, but used a simple template-based approach to realization. For the design of the FLIGHTS2 system, Moore et al (2004) focused on organizing and expressing the descriptions of the selected options and attributes in ways that were intended to make the descriptions both easy to understand and memorable. In addition, to increase coherence and naturalness of the descriptions, the system reasons about information structure (Steedman 2000) to control intonation, uses referring expressions that highlight attributes relevant to the user (e.g., a direct flight for a user who wants to minimize connections, vs. the cheapest flight for a user concerned about price), and signals discourse relations (e.g., contrast) with a
ncreases argument effectiveness and improves user satisfaction (Walker et al 2004). MATCH included content planning algorithms to determine what options and attributes to mention, but used a simple template-based approach to realization. For the design of the FLIGHTS2 system, Moore et al (2004) focused on organizing and expressing the descriptions of the selected options and attributes in ways that were intended to make the descriptions both easy to understand and memorable. In addition, to increase coherence and naturalness of the descriptions, the system reasons about information structure (Steedman 2000) to control intonation, uses referring expressions that highlight attributes relevant to the user (e.g., a direct flight for a user who wants to minimize connections, vs. the cheapest flight for a user concerned about price), and signals discourse relations (e.g., contrast) with appropriate intonational and discourse cues. For example, Figure 2 shows a description of options tailored to a user who prefers flying business class, on direct flights, and on KLM, in that order. The FLIGHTS system presents a small number of options that best match the user?s constraints, and points out ways in which
s, as dictated by the set of options that satisfy the current user query. For large data sets, attributes that partition the data into the minimal number of clusters should be chosen, so that a concise summary can be presented to the user to refine.3 3 In the original implementation as reported in Polifroni, Chung, and Seneff (2003), however, the cluster attributes were specified in advance based on domain knowledge, not determined at run time based solely on the set of options returned. Our discussion and evaluation of the SR approach is therefore based on the ?refined? refiner strategy from Polifroni and Walker (2008), where options are clustered based on attributes determined at run time. 493 Computational Linguistics Volume 37, Number 3 Figure 3 Dialog between simulator (M) and the Polifroni et al (2003) system (S). Although the SR approach provides a solution to the problem of presenting information when there are large numbers of options in a way that is suitable for an SDS, it has several limitations. First, there may be long refinement paths in the dialog structure, that is, many dialog turns may be necessary to narrow in on a suitably small set of options. Because the system does not know about the 
cise summary can be presented to the user to refine.3 3 In the original implementation as reported in Polifroni, Chung, and Seneff (2003), however, the cluster attributes were specified in advance based on domain knowledge, not determined at run time based solely on the set of options returned. Our discussion and evaluation of the SR approach is therefore based on the ?refined? refiner strategy from Polifroni and Walker (2008), where options are clustered based on attributes determined at run time. 493 Computational Linguistics Volume 37, Number 3 Figure 3 Dialog between simulator (M) and the Polifroni et al (2003) system (S). Although the SR approach provides a solution to the problem of presenting information when there are large numbers of options in a way that is suitable for an SDS, it has several limitations. First, there may be long refinement paths in the dialog structure, that is, many dialog turns may be necessary to narrow in on a suitably small set of options. Because the system does not know about the user?s preferences, the option clusters may contain irrelevant information which must be filtered out successively with each refinement step. In addition, the difficulty of summarizing options
lect attributes that generalize well over the data (i.e., produce large clusters of options), and thus lead to efficient summarization. Hence attributes that partition the data set into a small number of clusters are preferred. If the attribute that is best for summarization is not of interest to a particular user, dialog duration is increased unnecessarily. This in turn may lead to reduced user satisfaction, as the results of our evaluation suggest (see Section 4.1.3). 3. Our Approach: User Model Based Summarize and Refine (UMSR) Our approach, the UMSR approach first described in Demberg and Moore (2006), is intended to capture the complementary strengths of the two previous approaches. It exploits information from a user model to reduce dialog duration by selecting only options that are relevant to the user. In addition, we introduce a content structuring algorithm that supports stepwise refinement, as in Polifroni, Chung, and Seneff (2003), 494 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs but in which the structuring reflects the user?s preferences. Thus our approach maintains the benefits of user tailoring, while also being capable of dealing with a large 
ptions that the user model determines to be irrelevant (see Section 3.5). By providing users with an overview of the whole option space, we reduce the risk of leaving out options the user may wish to choose in a specific situation (thus overriding her standard user model). The level of detail that the system chooses to present options which are likely to be irrelevant to the user is a trade-off between efficiency and quality of overview. If a situational user model with information about the degree of urgency is available, such overview summaries could be left out when the user is in a hurry (Komatani et al 2003). Increasing User Satisfaction. We hypothesize that a system that implements the features discussed here will lead to greater overall user satisfaction. 495 Computational Linguistics Volume 37, Number 3 3.1 Implementation Our approach to information presentation was implemented within FLIGHTS, a spoken dialog system for flight booking (Moore et al 2004). The options in the flight booking domain are flight connections with the attributes arrival-time, departure-time, number-of-legs, travel-time, price, airline, fare-class, and layover-airport. A user model contains a partial ordering of these a
e irrelevant to the user is a trade-off between efficiency and quality of overview. If a situational user model with information about the degree of urgency is available, such overview summaries could be left out when the user is in a hurry (Komatani et al 2003). Increasing User Satisfaction. We hypothesize that a system that implements the features discussed here will lead to greater overall user satisfaction. 495 Computational Linguistics Volume 37, Number 3 3.1 Implementation Our approach to information presentation was implemented within FLIGHTS, a spoken dialog system for flight booking (Moore et al 2004). The options in the flight booking domain are flight connections with the attributes arrival-time, departure-time, number-of-legs, travel-time, price, airline, fare-class, and layover-airport. A user model contains a partial ordering of these attributes corresponding to the user?s ranking, as shown in Table 2. Furthermore, the user model stores preferences (e.g., for a certain airline or flying business class). In a real-world scenario, the user model can be acquired by requiring the user to register with the system at first use (Moore et al 2004), by building up a user model over time (Thomp
line, fare-class, and layover-airport. A user model contains a partial ordering of these attributes corresponding to the user?s ranking, as shown in Table 2. Furthermore, the user model stores preferences (e.g., for a certain airline or flying business class). In a real-world scenario, the user model can be acquired by requiring the user to register with the system at first use (Moore et al 2004), by building up a user model over time (Thompson, Goeker, and Langley 2004), or by classifying users into preference groups based on other information available about them, and using the group model (Rich 1979), as is frequently done in collaborative filtering. Once a user model exists, the user only needs to specify the current situational information, such as the destination, desired arrival time, and date of travel. 3.2 System Architecture A sketch of our system?s pipeline architecture focusing on the information presentation phase is given in Figure 4. In the version of our system that was used in evaluation, speech recognition and natural language understanding were performed by a wizard (see Section 6.1) who also chose from a set of canned queries during the initial information gathering phase
 for constructing and pruning the option tree, which structures all of the options that satisfy the user?s query into the tree and selects the entities that should be mentioned. The text planning step takes the pruned option tree as an input and transforms it into natural language. First, it determines how much information can be presented in one dialog turn, and how to structure the information in that turn. For example, in systems that aim to influence the user?s choice, such as product recommendation systems, the ordering can be arranged to increase the effectiveness of the recommendation (Carenini and Moore 2001). There exists a full generation pipeline for this system, as described in Moore et al (2004). However, for the experiments reported here, templates were used instead of the full generation pipeline, for reasons of robustness. Table 2 Attribute ranking for business user. Rank Attributes 1 fare class (preferred value: business) 2 arrival time, # of legs, departure time, travel time 6 airline (preferred value: KLM) 7 price, layover airport 496 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs Figure 4 System architecture with emphasis on information presentation phas
 user?s query into the tree and selects the entities that should be mentioned. The text planning step takes the pruned option tree as an input and transforms it into natural language. First, it determines how much information can be presented in one dialog turn, and how to structure the information in that turn. For example, in systems that aim to influence the user?s choice, such as product recommendation systems, the ordering can be arranged to increase the effectiveness of the recommendation (Carenini and Moore 2001). There exists a full generation pipeline for this system, as described in Moore et al (2004). However, for the experiments reported here, templates were used instead of the full generation pipeline, for reasons of robustness. Table 2 Attribute ranking for business user. Rank Attributes 1 fare class (preferred value: business) 2 arrival time, # of legs, departure time, travel time 6 airline (preferred value: KLM) 7 price, layover airport 496 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs Figure 4 System architecture with emphasis on information presentation phase. The system uses the Open Agent Architecture (OAA) framework (Martin, Cheyer, and Moran 199
 Table 2 Attribute ranking for business user. Rank Attributes 1 fare class (preferred value: business) 2 arrival time, # of legs, departure time, travel time 6 airline (preferred value: KLM) 7 price, layover airport 496 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs Figure 4 System architecture with emphasis on information presentation phase. The system uses the Open Agent Architecture (OAA) framework (Martin, Cheyer, and Moran 1999) as a communication hub. All modules are implemented as agents, whose communication is managed by the DIPPER dialog manager agent (Bos et al 2003), which invokes the different agents and stores the intermediate results from each component. The approach proposed in this article concerns the content structuring and selection step of the system, and is a new design. It consists of three major steps: clustering, building the option tree, and pruning. The first step in our content structuring algorithm is to cluster the values of each attribute in order to group them such that labels like cheap, moderate, and expensive can be assigned to values of continuous categories such as price. This clustering means that options can also be summarized 
ure 8 Diagram showing how the pruned option tree is mapped onto language. The tree on the right hand side corresponds to the example trees in Figures 6 and 7. The complete system utterance is shown in Figure 10. Figure 8 shows how the nodes in the pruned option tree translate to the system?s utterances. The different design decisions underlying sentence planning and realization will be explained in the following sections. 3.6.1 Turn Length. In any spoken dialog system, it is important not to present too much information in a single turn in order to keep the memory load on the user manageable (Seneff 2002). Thus, our system aims at presenting no more than two or maximally three options at once. However, the pruned option tree sometimes contains more than this critical number of options, and therefore needs to be broken down into smaller chunks. We thus divide the pruned option tree into several smaller dialog-turn-sized subtrees. Typically not all of these subtrees will be presented, but only the ones between the root of the tree and the chosen subset of flights that the user wishes to hear more about. In addition to determining the number of options to present in a single turn, the system must
ser is expected to make a choice indicating which of the options she would like to hear more about (for illustration see Figure 10). 7 Later experiments used a more sophisticated way of determining turn length, which we describe in Section 5. 8 Branching nodes as opposed to unary nodes. For example, in Figure 6, the unary node in the right subtree would not count as a separate level. 505 Computational Linguistics Volume 37, Number 3 This definition of turn length was employed in the reading and overhearer experiments (see Sections 4.1 and 4.2). However, it became clear in related experiments (Winterboer et al 2007) that this method of deciding on dialog turn length sometimes led to very long system turns, which were then difficult for the user to remember. We thus modified the algorithm in order to ease comprehension. We will return to this point later, in Section 5. 3.6.2 Referring to Sets of Options. Each branch in the pruned tree corresponds to a set of options. These options should be referred to in an effective way. We do this by taking into account both the dialog structure (i.e., structure of the argumentation) and the user?s interest: The description of a set of options is based on their justifi
 only those options that are likely to be relevant to the user, and explicitly points out trade-offs among options, we hypothesized that it would also consume less cognitive resources, that is, presentations based on UMSR would impose less cognitive load than those based on SR. Therefore, in parallel to our work on the interaction task experiment, a companion project conducted experiments using a dual-task setting (driving a simulated car while using the dialog system to book flights) to investigate the effects of the two strategies to information presentation (UMSR vs. SR) on cognitive load (Hu et al 2007). Results indicated that, contrary to expectations, the cognitive load placed on users by the UMSR system was in some cases higher than the cognitive load placed on users in the SR condition, and that this affected performance on the primary task (driving). By examining logs of the conversations, we found that the UMSR approach sometimes generated turns that were considerably longer than turns produced by the SR approach. Because we are primarily interested in whether the content selection and structuring aspects of UMSR led to its benefits, we removed the confounding factor of turn length by 
and information density would be roughly the same for both conditions. 6. Evaluation II ? User Interaction Study Due to the complexity of building a working end-to-end SDS, our previous experiments employed an ?overhearer? evaluation methodology, in which participants read 513 Computational Linguistics Volume 37, Number 3 or listened to pre-recorded dialogs with a scripted user. This limits the evaluation criteria that can be applied to users? perceptions (e.g., understandability, goodness of overview of options, and so on). Our third experiment, a short summary of which was first reported in Winterboer and Moore (2007), compares the two systems in a more interesting setting, in which users actively interact with the dialog systems. This setting allows us to measure the systems? impact on effectiveness of the interaction (as measured by task success) and efficiency (as measured by dialog duration), in addition to user satisfaction. In this experiment, we compare the revised UMSR approach, which controls the amount of information presented in each turn, to the SR approach as described previously. 6.1 The Wizard-of-Oz Paradigm and Experimental Environment The interaction task experiment presented here followed
eing or hearing the wizard during the experiment. The integrated SQL-based database system contained actual flight information as provided by airlines. The wizard used drop-down menus to perform stepwise queries according to a participant?s requests until a satisfying flight was found and booked. The generated textual information provided by the Web interface was copied-and-pasted to Speechify, a textto-speech (TTS) application provided by Nuance Communications, Inc. All participants heard a synthetic voice of their own gender speaking British English. This choice was motivated by the work of Nass and Brave (2005), which shows that the gender of the voice used for TTS plays a significant role in terms of user preferences and trust in the information provided (users prefer a voice that matches their gender). Participants were encouraged to speak naturally rather than merely to respond to system prompts. The wizard used very few questions as prompts (e.g., What would you like me to book for you?) and would only add additional questions (e.g., Do you have a preferred arrival time?) if the participant remained silent for more than five seconds after a round of information presentation by the system. 6.2 Ex
thod allows us to evaluate our information presentation strategy in the context of an actual interaction, there are still a number of shortcomings. An ideal user evaluation would use actual automatic speech recognition and language Figure 15 Results for all questions, interaction experiment. 516 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs understanding instead of the wizard performing these actions. In addition, it would use the actual model of each user rather than ask them to role-play. Although role-playing is an often used methodology in SDS evaluations (Polifroni and Walker 2008) and corpus collection (Carletta 2007), we recognize that there are concerns with respect to assigning subjects a user model as opposed to using the participants? own models. Possible problems with role-playing include the fact that participants may have incorrect expectations about the needs and preferences of the role they are supposed to play, and that they might not adopt the role sufficiently. Furthermore, a scenario where participants are role-playing cannot test how good the user model is, or how robust a user-adaptation system is. We chose role-playing as a method despite these concern
ation strategy in the context of an actual interaction, there are still a number of shortcomings. An ideal user evaluation would use actual automatic speech recognition and language Figure 15 Results for all questions, interaction experiment. 516 Demberg, Winterboer, and Moore A Strategy for Information Presentation in SDSs understanding instead of the wizard performing these actions. In addition, it would use the actual model of each user rather than ask them to role-play. Although role-playing is an often used methodology in SDS evaluations (Polifroni and Walker 2008) and corpus collection (Carletta 2007), we recognize that there are concerns with respect to assigning subjects a user model as opposed to using the participants? own models. Possible problems with role-playing include the fact that participants may have incorrect expectations about the needs and preferences of the role they are supposed to play, and that they might not adopt the role sufficiently. Furthermore, a scenario where participants are role-playing cannot test how good the user model is, or how robust a user-adaptation system is. We chose role-playing as a method despite these concerns because it allows us to more closely
ment, with the UMSR system also requiring fewer dialog turns. Furthermore, participants reported that they felt the optimal option was accessed more quickly in the UMSR condition than in the SR condition in all three experiments. Did the UMSR Approach Make Information Presentation More Effective? This hypothesis was tested in the interaction task experiment by measuring task success. We found that users chose the option that was best for the role they were playing more often in the interaction experiment. These findings also agree with results obtained in other work, using a dual-task method (Hu et al 2007; Winterboer et al 2007). Thus, we conclude that information access with the UMSR approach is more effective than with the SR approach. Did UMSR Provide a Better Overview of the Option Space and Was Higher Confidence Achieved with UMSR? Questions 2 (?Did the system give X a good overview of the available options??) and 3 (?Do you think there may be flights that are better options for X that the system did not tell X about??) of the questionnaire were designed to assess this aspect. The first two experiments showed a clear preference for the UMSR system in comparison with the SR system. Partici
UMSR system also requiring fewer dialog turns. Furthermore, participants reported that they felt the optimal option was accessed more quickly in the UMSR condition than in the SR condition in all three experiments. Did the UMSR Approach Make Information Presentation More Effective? This hypothesis was tested in the interaction task experiment by measuring task success. We found that users chose the option that was best for the role they were playing more often in the interaction experiment. These findings also agree with results obtained in other work, using a dual-task method (Hu et al 2007; Winterboer et al 2007). Thus, we conclude that information access with the UMSR approach is more effective than with the SR approach. Did UMSR Provide a Better Overview of the Option Space and Was Higher Confidence Achieved with UMSR? Questions 2 (?Did the system give X a good overview of the available options??) and 3 (?Do you think there may be flights that are better options for X that the system did not tell X about??) of the questionnaire were designed to assess this aspect. The first two experiments showed a clear preference for the UMSR system in comparison with the SR system. Participants in the interaction
R strategy over the SR strategy, and on no aspect was the SR system found to be significantly better than the UMSR system in our experiments. We conclude that our hypotheses were largely confirmed, and that a challenge for future work lies in the development of methods that allow the system to predict and control for the cognitive load induced by system utterances. We believe that this is particularly important because dialog systems are frequently used in situations in which the user?s hands and eyes are busy. For example, NASA is interested in spoken dialog technology for use in spacecraft (Rayner et al 2003), and automobile manufacturers are integrating an ever-increasing number of voice services into their products. In subsequent work, an end-to-end dialog system following the UMSR strategy was implemented in the context of the TownInfo system (Paksima, Georgila, and Moore 2009), which allows users to search for restaurants in the city of Edinburgh. The system was evaluated with participants interacting directly with the system (as opposed to a WOZ setting), and was compared to a system that implemented the typical sequential enumeration approach to information presentation. In the UMSR conditio
equired significantly fewer turns to complete the task (9.24 for UMSR and 17.78 for the sequential system), and conciseness, accessibility, and efficiency were all rated more highly in the UMSR condition than the sequential enumeration condition. In addition, overall user satisfaction was significantly higher for the UMSR system. Finally, the UMSR system outperformed the sequential system particularly clearly in cases where a trade-off among options existed. 8. Related Work Our experiments evaluate the UMSR model against the SR model described in Polifroni, Chung, and Seneff (2003). Recently, Polifroni and Walker (2008) developed several variants of the SR approach that differ in how they choose and structure attributes in the summaries presented to the user. That is, they differ in the way they rank attributes for presentation and the method used for clustering. There are two approaches to ranking, one based on the original refiner approach (which chooses to cluster on attributes for which a small number of clusters account for most of the options) and the other based on a user model (which chooses attributes for clustering based on the ranking in the user model). For clustering, they added an ?associative 
 further down in the option tree. Constraint values, namely, good arrival time being changed to fair, are automatically relaxed due to the ordering of the branches within the option tree. Various strategies for coping with over- and under-constrained queries have been developed in the literature. Systems proactively suggest additional refinements for underconstrained queries, as in You could try to look for cuisine type? (Pon-Barry, Weng, and Varges 2006; Varges, Weng, and Pon-Barry 2006), or relaxations for over-constrained queries, as in Would a slightly more expensive flight work for you? (Qu and Beale 1999; PonBarry, Weng, and Varges 2006). Additionally, constraints can be relaxed automatically based an ontology (Varges, Weng, and Pon-Barry 2006) or by predefining relaxation sets (e.g., from a specific street for a restaurant to the broader neighborhood) or categorical ones (e.g., relaxing Chinese to Asian) (Chung 2004). 9. Conclusions and Future Work The research presented in this article addresses the issue of how to scale information presentation strategies for spoken dialog systems to situations where many diverse options are available. We developed an approach that combines content selecti
additional refinements for underconstrained queries, as in You could try to look for cuisine type? (Pon-Barry, Weng, and Varges 2006; Varges, Weng, and Pon-Barry 2006), or relaxations for over-constrained queries, as in Would a slightly more expensive flight work for you? (Qu and Beale 1999; PonBarry, Weng, and Varges 2006). Additionally, constraints can be relaxed automatically based an ontology (Varges, Weng, and Pon-Barry 2006) or by predefining relaxation sets (e.g., from a specific street for a restaurant to the broader neighborhood) or categorical ones (e.g., relaxing Chinese to Asian) (Chung 2004). 9. Conclusions and Future Work The research presented in this article addresses the issue of how to scale information presentation strategies for spoken dialog systems to situations where many diverse options are available. We developed an approach that combines content selection with content structuring, and showed how a user model can inform both of these steps to optimize efficiency and effectiveness of the information presentation phase in spoken dialog systems. The knowledge derived from the user model can be used to enable a dialog system to automatically present trade-offs between the
towards more information. This means that providing an insufficient amount of information is perceived as worse than presenting too many details. Whittaker, Walker, and Maloor?s results also indicated that conciseness should be tailored to users, because some users appreciate conciseness more than others. Our system does not currently tailor turn length to specific users, because our user model does not contain information about a user?s conciseness preferences, or situational data, such as whether they are in a hurry, or can only devote a limited amount of attention on the task. Furthermore, Polifroni and Walker (2008) found in their user study that people who are not very familiar with the available options (e.g., tourists in a foreign city searching the restaurant domain) appreciate potentially longer, tailored summaries more than users who are very familiar with the data and know more precisely what they are looking for?such users preferred a simple refinement strategy or refinement with association over a user model?based recommendation. Exploring the Relationship between the User Model and Optimal Dialog Structure (Minimize Exploration Need). We have shown that presenting users first with those options
d the system-generated utterances place on the user. In this work, we try to manage cognitive load by controlling how many pieces of information are conveyed in one system turn. This is, however, a very coarse measure, as different linguistic factors have also been shown to affect cognitive load on users. For example, surprising or incoherent information structure has been observed to be more difficult to process (Vauras, Hyo?na?, and Niemi 1992; Van Gompel, Liversedge, and Pearson 2004), and complex syntactic structures (e.g., long-distance dependencies) have been shown to impose difficulty (Gibson 1998). Language processing difficulty is also affected by frequency: Less frequent structures and words are more difficult to process than more frequent ones (Ehrlich and Rayner 1981; Rayner 1998; Rayner et al 1998). Furthermore, lexical access (Pollatsek and Rayner 1990) and word predictability (Rayner et al 2001) have also been shown to play a role. Finally, deciding what is an information unit and estimating how difficult they are to remember (and recall) for a particular user is not a trivial task, and is highly dependent on individual differences in affect, aptitude, intelligence, episodic mem
ystem turn. This is, however, a very coarse measure, as different linguistic factors have also been shown to affect cognitive load on users. For example, surprising or incoherent information structure has been observed to be more difficult to process (Vauras, Hyo?na?, and Niemi 1992; Van Gompel, Liversedge, and Pearson 2004), and complex syntactic structures (e.g., long-distance dependencies) have been shown to impose difficulty (Gibson 1998). Language processing difficulty is also affected by frequency: Less frequent structures and words are more difficult to process than more frequent ones (Ehrlich and Rayner 1981; Rayner 1998; Rayner et al 1998). Furthermore, lexical access (Pollatsek and Rayner 1990) and word predictability (Rayner et al 2001) have also been shown to play a role. Finally, deciding what is an information unit and estimating how difficult they are to remember (and recall) for a particular user is not a trivial task, and is highly dependent on individual differences in affect, aptitude, intelligence, episodic memory, and so on. Therefore, a more fine-grained estimation of the cognitive load imposed on a user based on the number of information units to remember, the syntactic structure o
ver, a very coarse measure, as different linguistic factors have also been shown to affect cognitive load on users. For example, surprising or incoherent information structure has been observed to be more difficult to process (Vauras, Hyo?na?, and Niemi 1992; Van Gompel, Liversedge, and Pearson 2004), and complex syntactic structures (e.g., long-distance dependencies) have been shown to impose difficulty (Gibson 1998). Language processing difficulty is also affected by frequency: Less frequent structures and words are more difficult to process than more frequent ones (Ehrlich and Rayner 1981; Rayner 1998; Rayner et al 1998). Furthermore, lexical access (Pollatsek and Rayner 1990) and word predictability (Rayner et al 2001) have also been shown to play a role. Finally, deciding what is an information unit and estimating how difficult they are to remember (and recall) for a particular user is not a trivial task, and is highly dependent on individual differences in affect, aptitude, intelligence, episodic memory, and so on. Therefore, a more fine-grained estimation of the cognitive load imposed on a user based on the number of information units to remember, the syntactic structure of the generat
oarse measure, as different linguistic factors have also been shown to affect cognitive load on users. For example, surprising or incoherent information structure has been observed to be more difficult to process (Vauras, Hyo?na?, and Niemi 1992; Van Gompel, Liversedge, and Pearson 2004), and complex syntactic structures (e.g., long-distance dependencies) have been shown to impose difficulty (Gibson 1998). Language processing difficulty is also affected by frequency: Less frequent structures and words are more difficult to process than more frequent ones (Ehrlich and Rayner 1981; Rayner 1998; Rayner et al 1998). Furthermore, lexical access (Pollatsek and Rayner 1990) and word predictability (Rayner et al 2001) have also been shown to play a role. Finally, deciding what is an information unit and estimating how difficult they are to remember (and recall) for a particular user is not a trivial task, and is highly dependent on individual differences in affect, aptitude, intelligence, episodic memory, and so on. Therefore, a more fine-grained estimation of the cognitive load imposed on a user based on the number of information units to remember, the syntactic structure of the generated sentences, and th
ve also been shown to affect cognitive load on users. For example, surprising or incoherent information structure has been observed to be more difficult to process (Vauras, Hyo?na?, and Niemi 1992; Van Gompel, Liversedge, and Pearson 2004), and complex syntactic structures (e.g., long-distance dependencies) have been shown to impose difficulty (Gibson 1998). Language processing difficulty is also affected by frequency: Less frequent structures and words are more difficult to process than more frequent ones (Ehrlich and Rayner 1981; Rayner 1998; Rayner et al 1998). Furthermore, lexical access (Pollatsek and Rayner 1990) and word predictability (Rayner et al 2001) have also been shown to play a role. Finally, deciding what is an information unit and estimating how difficult they are to remember (and recall) for a particular user is not a trivial task, and is highly dependent on individual differences in affect, aptitude, intelligence, episodic memory, and so on. Therefore, a more fine-grained estimation of the cognitive load imposed on a user based on the number of information units to remember, the syntactic structure of the generated sentences, and their semantic coherence would allow the system to adapt to
. For example, surprising or incoherent information structure has been observed to be more difficult to process (Vauras, Hyo?na?, and Niemi 1992; Van Gompel, Liversedge, and Pearson 2004), and complex syntactic structures (e.g., long-distance dependencies) have been shown to impose difficulty (Gibson 1998). Language processing difficulty is also affected by frequency: Less frequent structures and words are more difficult to process than more frequent ones (Ehrlich and Rayner 1981; Rayner 1998; Rayner et al 1998). Furthermore, lexical access (Pollatsek and Rayner 1990) and word predictability (Rayner et al 2001) have also been shown to play a role. Finally, deciding what is an information unit and estimating how difficult they are to remember (and recall) for a particular user is not a trivial task, and is highly dependent on individual differences in affect, aptitude, intelligence, episodic memory, and so on. Therefore, a more fine-grained estimation of the cognitive load imposed on a user based on the number of information units to remember, the syntactic structure of the generated sentences, and their semantic coherence would allow the system to adapt to situational constraints (e.g., generate les
